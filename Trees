                      	 	*******TREES*******
Q1>  Given a binary tree, find its minimum depth using Depth First Search approach.
The minimum depth is the number of nodes along the shortest path from the root 
node down to the nearest leaf node.
Note: A leaf is a node with no children and -1 represents null value.

Note: A Binary tree data structure is built from the user input and the root 
node is provided, you just need to implement the dfsMinDepth()
An array element having value -1 represents NULL.

case=1
input=7
3 9 20 -1 -1 15 7
output=2

case=2
input=9
2 -1 3 -1 4 -1 5 -1 6
output=5

Solution:

import java.util.*;
class Solution
{
    int dfsMinDepth(Node node)
    {
       
        if(node==null){
            return 0;
        }

        if(node.left==null){
        return 1+dfsMinDepth(node.right);
        }
         if(node.right==null){
        return 1+dfsMinDepth(node.left);
        }
        
        return Math.min(dfsMinDepth(node.right),dfsMinDepth(node.left))+1;
        
    }
}

Q2>
/*
Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two 
nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges 
between them.

Note: A Binary tree data structure is built from the user input and the root 
node is provided, you just need to implement the diameterOfBinaryTree()
An array element having value -1 represents NULL.

Sample test case
 
case=1
input=5
1 2 3 4 5
output=3

Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

case=2
input=2
1 2
output=1

class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/

import java.util.*;
class Solution
{
    int height(Node node){
        if(node==null){
            return 0;
        }
        int x=height(node.left);
        int y=height(node.right);
        
        return Math.max(x,y)+1;
    }
    int diameterOfBinaryTree(Node node)
    {
        // Implement your code here       
        if(node==null){
            return 0;
        }
        int x=diameterOfBinaryTree(node.left);
        int y=diameterOfBinaryTree(node.right);
        
        int lh=height(node.left);
        int rh=height(node.right);
        int selfmax=lh+rh;
       
        
        return  Math.max(selfmax,Math.max(x,y));
    }
}

Q3>
Given the root of a binary tree and an integer targetSum, return true if the 
tree has a root-to-leaf path such that adding up all the values along the path 
equals targetSum.
A leaf is a node with no children.

Note: A Binary tree data structure is built from the user input and the root 
node is provided, you just need to implement the isPathSum()
An array element having value -1 represents NULL.


Sample test case
 
case=1
input=13
5 4 8 11 -1 13 4 7 2 -1 -1 -1 1
22
output=true
Explanation: The root-to-leaf path with the target sum is 5->4->11->2.

 
case=2
input=3
1 2 3
5
output=false

Solution:
  boolean isPathSum(Node node, int target)
if(node == null)
        {
            return false;
        }
        target -= node.data;
        if(node.left == null && node.right == null)   //when a leaf is encountered
        {
            return (target==0);
        }

        boolean isLeftPathSum =  isPathSum(node.left, target);
        boolean isRightPathSum = isPathSum(node.right, target);

        return isLeftPathSum || isRightPathSum;

Q4>
/*
Given the root of a binary tree, check whether it is a mirror of itself 
(i.e., symmetric around its center).

Note: A Binary tree data structure is built from the user input and the root 
node is provided, you just need to implement the isSymmetric()
An array element having value -1 represents NULL.

Sample test case

 

case=1
input=7
2 3 3 4 5 5 4
output=true

case=2
input=7
1 2 2 -1 3 -1 3
output=false

case=3
input=1
3
output=true

class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/

import java.util.*;
class Solution
{
    boolean isMirror(Node left,Node right){
        if(left==null && right==null){
            return true;
        }
        if(left==null || right==null){
            return false;
        }
        
        return (left.data==right.data) && isMirror(left.left,right.right) && isMirror(left.right,right.left);
    }
    boolean isSymmetric(Node node)
    {
        // Implement your code here
        if(node==null){
            return true;
        }
        return isMirror(node.left,node.right);
      
    }
}

/*
Given the root of a binary tree, perform level order traversal of the binary tree.

Note: A Binary tree data structure is built from the user input and the root 
node is provided, you just need to implement the levelOrder()
An array element having value -1 represents NULL.

case=1
input=7
40 30 50 -1 -1 45 60
output=[40, 30, 50, 45, 60]

Explanation: 
Input: first line is the number of nodes in the binary tree, followed by their value.
Output: level order traversal of the tree.

case=2
input=7
1 2 3 4 5 6 7
output=[1, 2, 3, 4, 5, 6, 7]


class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/

import java.util.*;
class Solution
{
    void levelOrder(Node root, List<Integer> result)
    {
        // Implement your code here
        if(root== null) return;
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        int level = 0;
        while(!q.isEmpty()){
            //Find the number of nodes at each level
            int size = q.size();
            for(int i=0 ; i<size ; i++){
                Node curNode = q.poll();
                result.add(curNode.data);
                if(curNode.left!=null){
                    q.add(curNode.left);
                }
                if(curNode.right != null){
                    q.add(curNode.right);
                }
            }
           level++;
        }
    }
}

Q6>
/*
Given the root of a binary tree, invert the tree, and return its root.

Note: A Binary tree data structure is built from the user input and the root 
node is provided, you just need to implement the invertBT()
An array element having value -1 represents NULL.

Sample testcase
 
case=1
input=7
4 2 7 1 3 6 9
output=[4, 7, 2, 9, 6, 3, 1]

 
case=2
input=3
2 1 3
output=[2, 3, 1]

case=3
input=0
output=[]

class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/

Solution1://swapping starts from the root node to the leaf nodes.
import java.util.*;
class Solution
{
    Node swap(Node t1){
        Node temp=null;
       temp=t1.left;
       t1.left=t1.right;
       t1.right=temp;
        
        return t1;
    }
    Node invertBT(Node node)
    {
        if(node==null){
            return node;
        }
        swap(node);
        invertBT(node.left);
        invertBT(node.right);
        
        return node;
    }
}

Solution 2:    //swapping starts from the leaf  nodes.

import java.util.*;
class Solution
{
    Node swap(Node t1){
        Node temp=null;
       temp=t1.left;
       t1.left=t1.right;
       t1.right=temp;
        
        return t1;
    }
    Node invertBT(Node node)
    {
        if(node==null){
            return node;
        }
        
        invertBT(node.left);
        invertBT(node.right);
        swap(node);
        
        return node;
    }
}

Q7>
/*
Given the root of a binary tree, return the sum of all left leaves.
A leaf is a node with no children. A left leaf is a leaf that is the left child 
of another node.

Note: A Binary tree data structure is built from the user input and the root 
node is provided, you just need to implement the sumOfLeaves()
An array element having value -1 represents NULL.

Sample testcase
 
case=1
input=7
3 9 20 -1 -1 15 7
output=24

Explanation: There are two left leaves in the binary tree, 
with values 9 and 15 respectively.

case=2
input=1
1
output=0

class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/

import java.util.*;
class Solution
{
    int sumOfLeaves(Node node)
    {
        // Implement your code here
        int sum=0;
        if(node.left!=null )
        if(node.left==null && node.right==null ){
            sum+=node.data;
        }
        sumOfLeaves(node.left);
        sumOfLeaves(node.right);
        return sum;
    }
}


Q9>
/*
You are given two binary trees root1 and root2.

Imagine that when you put one of them to cover the other, some nodes of the 
two trees are overlapped while the others are not. You need to merge the two 
trees into a new binary tree. The merge rule is that if two nodes overlap, 
then sum node values up as the new value of the merged node. Otherwise, the 
NOT null node will be used as the node of the new tree.

Return the merged tree. 
Note: The merging process must start from the root nodes of both trees.

Note: A Binary tree data structure is built from the user input and the root 
node is provided, you just need to implement the mergeBT()
An array element having value -1 represents NULL.

Sample testcase
 
case=1
input=4
1 3 2 5
7
2 1 3 -1 4 -1 7
output=[3, 4, 5, 5, 4, 7]
Explanation:
Input: line1 is the number of elements in binary tree1, followed by their 
values, followed by number of element in binary tree2, followed by their values.
Output: merged tree

case=2
input=1
1
2
1 2
output=[2, 2]

class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/

import java.util.*;
class Solution
{
    Node mergeBT(Node node1, Node node2)
    {
        // if root1 is null, return root2
        
        if(node1==null && node2==null){
            return null;
        }
        if(node1==null && node2!=null){
            return node2;
        }
        if(node1!=null && node2==null){
            return node1;
        }
        if(node1!=null && node2!=null){
            node1.data+=node2.data;
            
        }
        node1.left=mergeBT(node1.left,node2.left);
        node1.right=mergeBT(node1.right,node2.right);
        return node1;
    }
}



/*
Given the root of a binary tree, return the vertical order traversal of its 
nodes' values. (i.e., from top to bottom, column by column).
If two nodes are in the same row and column, the order should be from 
left to right.

Sample test case
 
case=1
input=7
3 9 20 -1 -1 15 7
output=[[9], [3, 15], [20], [7]]

case=2
input=7
3 9 8 4 0 1 7
output=[[4], [9], [3, 0, 1], [8], [7]]

class Node
{
    int data;
    Node left, right;
    Node(int data)
    {
        this.data = data;
        left = right = null;
    }
}
*/

import java.util.*;
class Solution
{
    class Pair{
        Node node;
        int col;
        Pair(Node node,int col){
            this.node=node;
            this.col=col;
        }
    }
    List<List<Integer>> verticalOrder(Node root)
    {
        // Implement your code here
        List<List<Integer>> result=new ArrayList<>();
         if(root==null){
             return result;
         }
        Map<Integer,List<Integer>> hm=new TreeMap<>();
        Queue<Pair> q=new LinkedList<>();
        q.offer(new Pair(root,0));
        while(!q.isEmpty()){
            Pair p=q.poll();
            Node node=p.node;
            int col=p.col;
            hm.putIfAbsent(col,new ArrayList<>());
            hm.get(col).add(node.data);
            
            if(node.left!=null){
                q.offer(new Pair(node.left,col-1));
            }
            if(node.right!=null){
                q.offer(new Pair(node.right,col+1));
            }
            
            }
            for(List<Integer> val:hm.values()){
                result.add(val);
            
        }
        return result;
        
    }
}
