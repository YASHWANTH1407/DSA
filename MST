//Krushkals algorithm

import java.util.*;

class test{
    static class UF{
        int[] parent;
        int[] rank;
        int count;
        
        public UF(int n){
            parent = new int[n];
            rank = new int[n];
            for(int i = 0 ; i < n; i++){
                parent[i] = i;
                rank[i] = 1;
            }
            count = n;
        }
        
        public void union(int x,int y){
            int a = find(x);
            int b= find(y);
            
            if(a!=b){
                if(rank[a]>rank[b]){
                    parent[b]=a;
                }
                else if(rank[b]>rank[a]){
                    parent[a]=b;
                }else{
                    parent[a]=b;
                    rank[b]++;
                }
                count--;
            }
        }
        
        public int find(int a){
            if(parent[a]!=a){
                parent[a]= find(parent[a]);
            }
            return parent[a];
        }
    }
    static class Edge{
        int src,dest,weight;
        @Override
        public  String toString(){
            return "["+src+","+dest+","+ weight+"]";
        }
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int V = sc.nextInt();
        int E = sc.nextInt();
        Edge[] edges = new Edge[E];
        for(int i = 0 ;i<E;i++){
            Edge e = new Edge();
            e.src = sc.nextInt();
            e.dest = sc.nextInt();
            e.weight = sc.nextInt();
            edges[i] = e;
        }
        Arrays.sort(edges,(a,b)->a.weight - b.weight);
        
        UF u = new UF(V);
        List<Edge> mst = new ArrayList<>();
        int totalweight = 0;
        
        for(Edge edge: edges){
            int r1 = u.find(edge.src);
            int r2 = u.find(edge.dest);
            
            if(r1!=r2){
                mst.add(edge);
                totalweight+=edge.weight;
                u.union(r1,r2);
                
            }
            if(mst.size() == V-1){
                break;
            }
        }
        System.out.println(mst);
        System.out.println(totalweight);
        
    }
}



There are n cities labeled from 1 to n. You are given the integer n and an 
array connections where connections[i] = [xi, yi, costi] indicates that the 
cost of connecting city xi and city yi (bidirectional connection) is costi.

Return the minimum cost to connect all the n cities such that there is at 
least one path between each pair of cities. If it is impossible to connect 
all the n cities, return -1,

The cost is the sum of the connections' costs used.

case=1
input=3 3
1 2 5
1 3 6
2 3 1
output=6

Explanation: 
Input: Number of vertices, followed by number of edges, followed by values 
for edges.
Choosing any 2 edges will connect all cities so we choose the minimum 2.

case=2
input=4 2
1 2 3
3 4 4
output=-1

Explanation: There is no way to connect all cities even if all edges are used.




import java.util.*;

class test{
    static class UF{
        int[] parent;
        int[] rank;
        int count;
        
        public UF(int n){
            parent = new int[n];
            rank = new int[n];
            for(int i = 0 ; i < n; i++){
                parent[i] = i;
                rank[i] = 1;
            }
            count = n;
        }
        
        public void union(int x,int y){
            int a = find(x);
            int b= find(y);
            
            if(a!=b){
                if(rank[a]>rank[b]){
                    parent[b]=a;
                }
                else if(rank[b]>rank[a]){
                    parent[a]=b;
                }else{
                    parent[a]=b;
                    rank[b]++;
                }
                count--;
            }
        }
        
        public int find(int a){
            if(parent[a]!=a){
                parent[a]= find(parent[a]);
            }
            return parent[a];
        }
    }
    static class Edge{
        int src,dest,weight;
        @Override
        public  String toString(){
            return "["+src+","+dest+","+ weight+"]";
        }
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int V = sc.nextInt();
        int E = sc.nextInt();
        Edge[] edges = new Edge[E];
        for(int i = 0 ;i<E;i++){
            Edge e = new Edge();
            e.src = sc.nextInt();
            e.dest = sc.nextInt();
            e.weight = sc.nextInt();
            edges[i] = e;
        }
        Arrays.sort(edges,(a,b)->a.weight - b.weight);
        
        UF u = new UF(V+1);
        List<Edge> mst = new ArrayList<>();
        int totalweight = 0;
        
        for(Edge edge: edges){
            int r1 = u.find(edge.src);
            int r2 = u.find(edge.dest);
            
            if(r1!=r2){
                mst.add(edge);
                totalweight+=edge.weight;
                u.union(r1,r2);
                
            }
            
            if(mst.size() == V-1){
                
                break;
               
            }
        }
        if(mst.size() == V-1){
                
                System.out.println(totalweight);
               
            }
            else{
                 System.out.println("-1");
            }
        }
        
       
        
    }


You are given an undirected, weighted, and connected graph with V vertices 
numbered from 0 to V-1, and E edges. Your task is to compute the 
Minimum Spanning Tree (MST) of the graph using Prim's Algorithm.

Input:
The first line contains two integers:
V — the number of vertices (1 ≤ V ≤ 10⁵)
E — the number of edges (0 ≤ E ≤ 10⁶)

The next E lines each contain three integers:
u, v, and w — representing an edge between vertices u and v with weight w
(0 ≤ u, v < V, 1 ≤ w ≤ 10⁹)

Output:
Print the list of edges included in the MST, in the format:

[[u1, v1, w1], [u2, v2, w2], ..., [uV-1, vV-1, wV-1]]
where each triple represents an edge in the MST.
On the next line, print the total weight of the MST.

If there are multiple valid MSTs, you may print any one of them.

Sample test case

case=1
input=4 5
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4
output=19


import java.util.*;
class Pair {
    int weight;
    int node;
    Pair(int weight, int node) {
        this.weight = weight;
        this.node = node;
    }
}
public class test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int V = sc.nextInt(); 
        int e = sc.nextInt(); 
        ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<>();
        for (int i = 0; i<V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < e; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            adj.get(u).add(new ArrayList<>(Arrays.asList(v,w)));
            adj.get(v).add(new ArrayList<>(Arrays.asList(u,w))); 
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b)->a.weight-b.weight);
        boolean[] visited = new boolean[V];
        List<List<Integer>> mstEdges = new ArrayList<>();
        int totalWeight = 0;
        pq.add(new Pair(0, 0)); 
        while (!pq.isEmpty()) {
            Pair current =pq.poll();
            int wt = current.weight;
            int u =current.node;
            if (visited[u]) {
                continue;
            }
            visited[u] = true;
            totalWeight += wt;
                for (List<Integer>edge :adj.get(u)) {
                    int v= edge.get(0);
                    int w= edge.get(1);
                    if (!visited[v]) {
                        mstEdges.add(Arrays.asList(u,v,w));
                        break;
                    }
                }
            for (List<Integer>edge :adj.get(u)) {
                int v = edge.get(0);
                int w = edge.get(1);
                if (!visited[v]) {
                    pq.add(new Pair(w,v));
                }
            }
        }
        System.out.println(totalWeight);
    }
}


There are n cities labeled from 1 to n. You are given the integer n and an 
array connections where connections[i] = [xi, yi, costi] indicates that the 
cost of connecting city xi and city yi (bidirectional connection) is costi.

Return the minimum cost to connect all the n cities such that there is at 
least one path between each pair of cities. If it is impossible to connect 
all the n cities, return -1, Prim's Algorithem

The cost is the sum of the connections' costs used.

case=1
input=3 3
1 2 5
1 3 6
2 3 1
output=6

Explanation: 
Input: Number of vertices, followed by number of edges, followed by values 
for edges.
Choosing any 2 edges will connect all cities so we choose the minimum 2.

case=2
input=4 2
1 2 3
3 4 4
output=-1

Explanation: There is no way to connect all cities even if all edges are used.


import java.util.*;
class Pair {
    int weight;
    int node;
    Pair(int weight, int node) {
        this.weight = weight;
        this.node = node;
    }
}
public class test {
    public static int mst(int n, List<int[]>connections) {
        ArrayList<ArrayList<int[]>> adj = new ArrayList<>();
        for (int i = 0; i <= n; i++){
            adj.add(new ArrayList<>());
        } 
        for (int[] conn : connections) {
            int u = conn[0];
            int v = conn[1];
            int w = conn[2];
            adj.get(u).add(new int[]{v, w});
            adj.get(v).add(new int[]{u, w});
        }
        boolean[] visited = new boolean[n+1];
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) ->a.weight-b.weight);
        int totalCost = 0;
        int count = 0;
        pq.add(new Pair(0, 1)); 
        while (!pq.isEmpty()) {
            Pair current = pq.poll();
            int u = current.node;
            int w = current.weight;
            if (visited[u]){
                continue;
            } 
            visited[u] = true;
            totalCost += w;
            count++;
            for (int[] neighbor : adj.get(u)) {
                int v = neighbor[0];
                int cost = neighbor[1];
                if (!visited[v]) {
                    pq.add(new Pair(cost,v));
                }
            }
        }
        if(count == n){
            return totalCost;
        }
        return -1;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int e = sc.nextInt();
        List<int[]>connections = new ArrayList<>();
        for (int i = 0; i < e; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int cost = sc.nextInt();
            connections.add(new int[]{u, v, cost});
        }
        int result = mst(n, connections);
        System.out.println(result);
    }
}

You are given an array points representing integer coordinates of some points 
on a 2D-plane, where points[i] = [xi, yi].

The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan 
distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute 
value of val.

Return the minimum cost to make all points connected. All points are connected 
if there is exactly one simple path between any two points.

case=1
input=5
0 0
2 2
3 10
5 2
7 0
output=20

Explanation: 

We can connect the points as shown above to get the minimum cost of 20.
Notice that there is a unique path between every pair of points.

case=2
input=3
3 12
-2 5
-4 1
output=18

import java.util.*;

class Pair
{
    int node,weight;
    Pair(int weight,int node)
    {
        this.node= node;
        this.weight= weight;
    }
}
class test
{
    public static int manhattan(int[] a,int[] b )
    {
        return Math.abs(a[0]-b[0])+ Math.abs(a[1]-b[1]);
    }
    public static int Prims(int n, List<int[]> points)
    {
        boolean visited[] = new boolean[n];
        PriorityQueue<Pair> pq= new  PriorityQueue<>(Comparator.comparingInt(p->p.weight));
        
        pq.add(new Pair(0,0));
        int tc=0;
        int eu=0;
        
        while(!pq.isEmpty()&& eu<n)
        {
            Pair current = pq.poll();
            int weight = current.weight;
            int node = current.node;

            if (visited[node])
                continue;

            visited[node] = true;
            tc += weight;
            eu++;

            for (int i=0;i<n; i++) 
            {
                if (!visited[i]) 
                {
                    int dist = manhattan(points.get(node), points.get(i));
                    pq.add(new Pair(dist, i));
                }
            }
        }
        return tc;
    }
    public static void main(String args[])
    {
        Scanner sc= new Scanner(System.in);
        int V = sc.nextInt();
        
        List<int[]> points= new ArrayList<>();
        for(int i=0;i<V;i++)
        {
            int x= sc.nextInt();
            int y=sc.nextInt();
            points.add(new int[]{x,y});
        }
        int res= Prims(V,points);
        
        System.out.println(res);
    }
}

There are n houses in a village. We want to supply water for all the houses 
by building wells and laying pipes.

For each house i, we can either build a well inside it directly with 
cost wells[i - 1] (note the -1 due to 0-indexing), or pipe in water from 
another well to it. The costs to lay pipes between houses are given by the 
array pipes where each pipes[j] = [house1j, house2j, costj] represents the 
cost to connect house1j and house2j together using a pipe. Connections are 
bidirectional, and there could be multiple valid connections between the 
same two houses with different costs.

Return the minimum total cost to supply water to all houses.

case=1
input=3
1 2 2
2
1 2 1
2 3 1
output=3

Explanation: The image shows the costs of connecting houses using pipes.
The best strategy is to build a well in the first house with cost 1 and 
connect the other houses to it with cost 2 so the total cost is 3.
 
case=2
input=2
1 1
2
1 2 1
1 2 2
output=2

Explanation: We can supply water with cost two using one of the three options:
Option 1:
  - Build a well inside house 1 with cost 1.
  - Build a well inside house 2 with cost 1.
The total cost will be 2.
Option 2:
  - Build a well inside house 1 with cost 1.
  - Connect house 2 with house 1 with cost 1.
The total cost will be 2.
Option 3:
  - Build a well inside house 2 with cost 1.
  - Connect house 1 with house 2 with cost 1.
The total cost will be 2.
Note that we can connect houses 1 and 2 with cost 1 or with cost 2 but we 
will always choose the cheapest option. 


****************************Provide the solution





