Given n activities defined by its start time and end time, the maximum number 
of activities such that no two activities overlap.

case=1
input=5
5 7
1 4
0 6
8 9
3 5
output=
[1, 4]
[5, 7]
[8, 9]

case=2
input=3
0 30
5 10
15 20
output=[5, 10]
[15, 20]


import java.util.*;
public class test{
    public static List<List<Integer>> activities(int arr[][],int n){
        List<List<Integer>> l=new ArrayList<>();
        Arrays.sort(arr,Comparator.comparingInt(a->a[1]));
        
        l.add(Arrays.asList(arr[0][0],arr[0][1]));
        int lastEndTime=arr[0][1];
        for(int i=1;i<n;i++){
           if(arr[i][0]>=lastEndTime){
               l.add(Arrays.asList(arr[i][0],arr[i][1]));
               lastEndTime=arr[i][1];
           }
        }
        return l;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[][]=new int[n][2];
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<2;j++){
                arr[i][j]=sc.nextInt();
            }
        }
       List<List<Integer>> act=activities(arr,n);
       for(List<Integer> ll:act){
           System.out.println(ll);
       }
    }
}



You are given a positive integer num consisting only of digits 6 and 9.
Return the maximum number you can get by changing at most one digit 
(6 becomes 9, and 9 becomes 6).

Sample test case

case=1
input=9669
output=9969

Explanation: 
Changing the first digit results in 6669.
Changing the second digit results in 9969.
Changing the third digit results in 9699.
Changing the fourth digit results in 9666.
The maximum number is 9969.

case=2
input=9996
output=9999

Explanation: Changing the last digit 6 to 9 results in the maximum number.

case=3
input=9999
output=9999

Explanation: It is better not to apply any change.

Solution:
import java.util.*;
public class GreedyAlgorithms {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine(); //9669
        int max=Integer.parseInt(str);
        int n=str.length();
        StringBuilder sb=new StringBuilder(str);
        for(int i=0;i<n;i++){
            char ch=str.charAt(i);
            if(ch=='6') {
                sb.setCharAt(i,'9');
                int newval=Integer.parseInt(sb.toString());
                max=Math.max(newval,max);

            }
            if(ch=='6') {
                sb.setCharAt(i,'6');
                int newval1=Integer.parseInt(sb.toString());
                max=Math.max(newval1,max);
            }
        }
        System.out.println(max);

    }
}
