Given n activities defined by its start time and end time, the maximum number 
of activities such that no two activities overlap.

case=1
input=5
5 7
1 4
0 6
8 9
3 5
output=
[1, 4]
[5, 7]
[8, 9]

case=2
input=3
0 30
5 10
15 20
output=[5, 10]
[15, 20]


import java.util.*;
public class test{
    public static List<List<Integer>> activities(int arr[][],int n){
        List<List<Integer>> l=new ArrayList<>();
        Arrays.sort(arr,Comparator.comparingInt(a->a[1]));
        
        l.add(Arrays.asList(arr[0][0],arr[0][1]));
        int lastEndTime=arr[0][1];
        for(int i=1;i<n;i++){
           if(arr[i][0]>=lastEndTime){
               l.add(Arrays.asList(arr[i][0],arr[i][1]));
               lastEndTime=arr[i][1];
           }
        }
        return l;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[][]=new int[n][2];
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<2;j++){
                arr[i][j]=sc.nextInt();
            }
        }
       List<List<Integer>> act=activities(arr,n);
       for(List<Integer> ll:act){
           System.out.println(ll);
       }
    }
}



You are given a positive integer num consisting only of digits 6 and 9.
Return the maximum number you can get by changing at most one digit 
(6 becomes 9, and 9 becomes 6).

Sample test case

case=1
input=9669
output=9969

Explanation: 
Changing the first digit results in 6669.
Changing the second digit results in 9969.
Changing the third digit results in 9699.
Changing the fourth digit results in 9666.
The maximum number is 9969.

case=2
input=9996
output=9999

Explanation: Changing the last digit 6 to 9 results in the maximum number.

case=3
input=9999
output=9999

Explanation: It is better not to apply any change.

Solution:
import java.util.*;
public class GreedyAlgorithms {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine(); //9669
        int max=Integer.parseInt(str);
        int n=str.length();
        StringBuilder sb=new StringBuilder(str);
        for(int i=0;i<n;i++){
            char ch=str.charAt(i);
            if(ch=='6') {
                sb.setCharAt(i,'9');
                int newval=Integer.parseInt(sb.toString());
                max=Math.max(newval,max);

            }
            if(ch=='6') {
                sb.setCharAt(i,'6');
                int newval1=Integer.parseInt(sb.toString());
                max=Math.max(newval1,max);
            }
        }
        System.out.println(max);

    }
}



3>
You are given an integer array prices where prices[i] is the price of a given 
stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold 
at most one share of the stock at any time. However, you can buy it then 
immediately sell it on the same day.

Find and return the maximum profit you can achieve.

case=1
input=6
7 1 5 3 6 4
output=7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), 
profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.

case=2
input=5
1 2 3 4 5
output=4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), 
profit = 5-1 = 4.
Total profit is 4.

case=2
input=5
7 6 4 3 1
output=0
Explanation: There is no way to make a positive profit, so we never buy the 
stock to achieve the maximum profit of 0.

Solution:
import java.util.*;
public class test{
    public static int profit(int arr[]){
        int profitsum=0;
        int maxprofit=Integer.MIN_VALUE;
        for(int i=0;i<arr.length-1;i++){
            int j=i+1;
            if(arr[j]>arr[i]){
                profitsum+=(arr[j]-arr[i]);
            }
            maxprofit=Math.max(maxprofit,profitsum);
        }
        return maxprofit;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<arr.length;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println(profit(arr));
    }
}



There are n gas stations along a circular route, where the amount of gas at 
the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel 
from the ith station to its next (i + 1)th station. You begin the journey with 
an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index 
if you can travel around the circuit once in the clockwise direction, 
otherwise return -1. If there exists a solution, it is guaranteed to be unique.

case=1
input=5
1 2 3 4 5
3 4 5 1 2
output=3
Explanation:
Input: The first line is the number gas stations, followed by values 
for gas stations, followed by costs.
Output:3
Start at station 3 (index 3) and fill up with 4 unit of gas. 
Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back 
to station 3.
Therefore, return 3 as the starting index.

case=2
input=3
2 3 4
3 4 3
output=-1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the 
next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only 
have 3.
Therefore, you can't travel around the circuit once no matter where you start.



import java.util.*;
public class test{
    public static int startingIndex(int gas[],int cost[]){
        // int n=gas.length;
        //  int tank=0;
        // for(int i=0;i<i%n;i++){
        //   tank=tank+(cost[i-1]+gas[i]);
        //     if(gas[i]>cost[i]){
        //         tank+=gas[i];
        //         return i;
        //     }
        //     int j=i;
        //     if(i==j){
        //         return i%n;
        //     }
            
        // }
        // return -1;
        
        int total=0,tank=0,start=0;
        for(int i=0;i<gas.length;i++){
            int diff=gas[i]-cost[i];
            total+=diff;
            tank+=diff;
            if(tank<0){
                start=i+1;
                tank=0;
            }
            
        }
        return total>=0?start:-1;
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int gas[]=new int[n];
        int cost[]=new int[n];
        for(int i=0;i<n;i++){
            gas[i]=sc.nextInt();
        }
        for(int j=0;j<n;j++){
            cost[j]=sc.nextInt();
        }
        System.out.println(startingIndex(gas,cost));
    }
}


There are n children standing in a line. Each child is assigned a rating value 
given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.

Return the minimum number of candies you need to have to distribute the candies 
to the children.

case=1
input=3
1 0 2
output=5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 
candies respectively.

case=2
input=3
1 2 2
output=4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 
candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.


import java.util.*;
public class test{
    public static int  NumberOfCandies(int arr[]){
       int total=arr.length;
       if(arr[0]>arr[1]){
           total+=1;
       }
       if(arr[arr.length-1]>arr[arr.length-2]){
           total+=1;
       }
       for(int i=1;i<arr.length-1;i++){
           if(arr[i]>arr[i+1] || arr[i]>arr[i-1]){
               total++;
           }
       }
       return total;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println(NumberOfCandies(arr));
    }
}


Given an array of meeting time intervals intervals where 
intervals[i] = [starti, endi], return the minimum number of conference rooms 
required.

case=1
input=3
0 30
5 10
15 20
output=2

case=2
input=2
7 10
2 4
output=1



import java.util.*;
public class test{
    public static int totalrooms(int arr[][]){
        int total=1;
        Arrays.sort(arr,(a,b)->Integer.compare(a[0],b[0]));
        for(int i=0;i<arr.length-1;i++){
            if(arr[i][1]>arr[i+1][0]){
                total++;
            }
        }
        return total;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[][]=new int[n][2];
        for(int i=0;i<n;i++){
            for(int j=0;j<2;j++){
                arr[i][j]=sc.nextInt();
            }
        }
        System.out.println(totalrooms(arr));
    }
}



Given an array of intervals intervals where intervals[i] = [starti, endi], 
return the minimum number of intervals you need to remove to make the rest of 
the intervals non-overlapping.

Note that intervals which only touch at a point are non-overlapping. For 
example, [1, 2] and [2, 3] are non-overlapping.

case=1
input=4
1 2
2 3
3 4
1 3
output=1
Explanation: [1,3] can be removed and the rest of the intervals are 
non-overlapping.

case=2
input=3
1 2
1 2
1 2
output=2
Explanation: You need to remove two [1,2] to make the rest of the intervals 
non-overlapping.


case=3
input=2
1 2
2 3
output=0
Explanation: You don't need to remove any of the intervals since they're 
already non-overlapping.



import java.util.*;
public class test{
    public static int mini(int arr[][]){
        Arrays.sort(arr,Comparator.comparingInt(a->a[1]));
        int last=arr[0][1];
        int least=0;
        for(int i=1;i<arr.length;i++){
            if(arr[i][0]<last){
                
                least++;
            }
            else{
                last=arr[i][1];
            }
            
        }
        return least;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[][]=new int[n][2];
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<2;j++){
                arr[i][j]=sc.nextInt();
            }
        }
        System.out.println(mini(arr));
    }
}

You are given an integer num. You can swap two digits at most once to get 
the maximum valued number.
Return the maximum valued number you can get.

case=1
input=2736
output=7236
Explanation: Swap the number 2 and the number 7.

case=2
input=9973
output=9973
Explanation: No swap.


Soolution:
import java.util.*;

public class test 

{


    public static String maxvalue(char arr[]) 

{


        int n = arr.length;
        int[] last = new int[10]; // last occurrence of digits 0-9

        for (int i = 0; i < n; i++) 

{


            last[arr[i] - '0'] = i;
        

}

        for (int i = 0; i < n; i++) 

{


            int current = arr[i] - '0';

            // check from 9 to current+1 for better swap
            for (int d = 9; d > current; d--) 

{


                if (last[d] > i) 

{


                    // swap and return
                    char temp = arr[i];
                    arr[i] = arr[last[d]];
                    arr[last[d]] = temp;
                    return new String(arr);
                

}
            

}
        

}

        return new String(arr); // already max
    

}

    public static void main(String[] args) 

{


        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        char arr[] = str.toCharArray();
        System.out.println(maxvalue(arr));
    

}

}


Given a list of non-negative integers nums, arrange them such that they form 
the largest number and return it.
Since the result may be very large, so you need to return a string instead 
of an integer.

case=1
input=2
10 2
output=210

case=2
input=5
3 30 34 5 9
output=9534330

import java.util.*;
public class test{
    public static String maxnumber(String arr[]){
        int n=arr.length;
        Arrays.sort(arr,(a,b)->(b+a).compareTo(a+b));
        StringBuilder sb=new StringBuilder();
        for(String x:arr){
            sb.append(x);
        }
        return sb.toString();
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        String arr[]=new String[n];
        for(int i=0;i<n;i++){
            arr[i]=String.valueOf(sc.nextInt());
        }
        
        System.out.println(maxnumber(arr));
    }
}

Given a positive integer n, you can apply one of the following operations:

If n is even, replace n with n / 2.
If n is odd, replace n with either n + 1 or n - 1.
Return the minimum number of operations needed for n to become 1.

case=1
input=8
output=3
Explanation: 8 -> 4 -> 2 -> 1

case=2
input=7
output=4
Explanation: 7 -> 8 -> 4 -> 2 -> 1
or 7 -> 6 -> 3 -> 2 -> 1

case=3
input=4
output=2
Explanation: 4 -> 2 -> 1
import java.util.*;
public class test{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        if(n%2==0){
            evencount(n);
        }
        if(n%2!=0){
            oddcount(n);
        }
        
    }
}





