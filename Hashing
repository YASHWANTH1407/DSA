Given an array of integers nums and an integer target, return indices of the 
two numbers such that they add up to target.
You should not use the same element twice. If there are not two numbers that 
add up to target, then return empty list.

Sample testcase

case=1
input=4
2 7 11 15
9
output=[0, 1]

Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

case=3
input=3
11 2 15 7 5
14
output=[]



import java.util.*;
public class test{
    public static int[] findIndeces(int arr[],int target){
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            int complement=target-arr[i];
            if(hm.containsKey(complement)){
                return new int[]{hm.get(complement),i};
            }
            hm.put(arr[i],i);
        }
        return new int[]{};
    
       
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int target=sc.nextInt();
        System.out.println(Arrays.toString(findIndeces(arr,target)));
        
       
    }
}


Given an array nums containing n distinct numbers in the range [0, n], return 
the only number in the range that is missing from the array.

case=1
input=3
3 0 1
output=2
Explanation:
n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is 
the missing number in the range since it does not appear in nums.

case=2
input=2
0 1
output=2
Explanation:
n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is 
the missing number in the range since it does not appear in nums.

case=3
input=9
9 6 4 2 3 5 7 0 1
output=8
Explanation:
n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is 
the missing number in the range since it does not appear in nums.


import java.util.*;
public class test{
    public static int missingNumber(int arr[]){
       List<Integer> l=new ArrayList<>();
       for(int i=0;i<arr.length;i++){
           l.add(arr[i]);
       }
       for(int i=0;i<=arr.length;i++){
           if(!l.contains(i)){
               return i;
           }
       }
       return -1;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
       System.out.println(missingNumber(arr));
    }
}


Given two strings s and t, return true if t is an anagram of s, and 
false otherwise.
An Anagram is a word or phrase formed by rearranging the letters of a different 
word or phrase, typically using all the original letters exactly once.

Sample test case
case=1
input=anagram
nagaram
output=true

case=2
input=rat
car
output=false


import java.util.*;
public class test{
    public static boolean Anagram(String str1,String str2){
        TreeMap<Character,Integer> hm1=new TreeMap<>();
        TreeMap<Character,Integer> hm2=new TreeMap<>();
        if(str1.length()!=str2.length()){
            return false;
        }
        for(Character ch:str1.toCharArray()){
                hm1.put(ch,hm1.getOrDefault(ch,0)+1);
            }
            
            for(Character ch2:str2.toCharArray()){
                hm2.put(ch2,hm2.getOrDefault(ch2,0)+1);
            }
            
            
       return hm1.equals(hm2);
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String str1=sc.next();
        String str2=sc.next();
        System.out.println(Anagram(str1,str2));
    }
}


Given two strings s and t, determine if they are isomorphic.
Two strings s and t are isomorphic if the characters in s can be replaced 
to get t.
All occurrences of a character must be replaced with another character while 
preserving the order of characters. No two characters may map to the 
same character, but a character may map to itself.

Sample testcase

case=1
input=egg
add
output=true

Explanation:
The strings s and t can be made identical by:
Mapping 'e' to 'a'.
Mapping 'g' to 'd'.

case=2
input=foo
bar
output=false

Explanation:
The strings s and t can not be made identical as 'o' needs to be mapped to 
both 'a' and 'r'.

case=3
input=paper
paper
output=true


import java.util.*;

class test
{
    public static boolean isIso(String s, String c)
    {
        Map<Character,Character> hms= new HashMap<>();
        Map<Character,Character> hmc= new HashMap<>();
        
        for(int i=0;i<s.length();i++)
        {
            char chs= s.charAt(i);
            char chc= c.charAt(i);
            
            if(hms.containsKey(chs))
            {
                if(hms.get(chs)!=chc)
                {
                    return false;
                }
            }
            else
            {
                hms.put(chs,chc);
            }
            
            if(hmc.containsKey(chc))
            {
                if(hmc.get(chc)!=chs)
                {
                    return false;
                }
            }
            else
            {
                hmc.put(chc,chs);
            }
        }
        return true;
    }
    public static void main(String args[])
    {
        Scanner sc= new Scanner(System.in);
        String s= sc.next();
        String c= sc.next();
            
        if(s.length()!=c.length())
        {
            System.out.println(false);
        }
        else
        {
            System.out.println(isIso(s,c));
        }
    }

}

Given a string num which represents an integer, return true if num is a 
strobogrammatic number.
A strobogrammatic number is a number that looks the same when rotated 
180 degrees (looked at upside down).

Sample testcase

case=1
input=69
output=true

case=2
input=962
output=false

case=3
input=88
output=true

import java.util.*;
public class test{
    public static boolean grammetic(String str){
        int n=str.length();
        HashMap<Integer,Integer> hm=new HashMap<>();
        hm.put(0,0);
        hm.put(1,1);
        hm.put(6,9);
        hm.put(8,8);
        hm.put(9,6);
        
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<str.length();i++){
            char ch=str.charAt(i);
            int digit=ch-'0';
            if(!hm.containsKey(digit)){
                return false;
            }
            else{
                sb.append(hm.get(digit));
            }
        }
        String ans=sb.reverse().toString();
        
        if(!ans.equals(str)){
            return false;
        }
        return true;
    }
    public static void main(String[] args){          
        Scanner sc=new Scanner(System.in);
        String str=sc.next();
        System.out.println(grammetic(str));
    }
}


Given an array of unique integers arr, replace each element with its rank.
The rank represents how large the element is. The rank has the following rules:
Rank is an integer starting from 1.

The larger the element, the larger the rank. Rank should be as small as possible.
 
Sample test case

case=1
input=4
40 10 20 30
output=[4, 1, 2, 3]

Explanation: 40 is the largest element. 10 is the smallest. 20 is the second 
smallest. 30 is the third smallest.

case=2
input=3
120 110 100
output=[3, 2, 1]


import java.util.*;
public class test{
    public static int[] rank(int arr[],int copy[]){
        
        Arrays.sort(arr);

        Map<Integer,Integer> hm=new TreeMap<>();
        for(int i=0;i<arr.length;i++){
            if(!hm.containsKey(arr[i])){
            hm.put(arr[i],i+1);
            }
        }
        int ans[]=new int[arr.length];
        // int i=0; 
        for(int i=0;i<copy.length;i++){
            ans[i]=hm.get(copy[i]);
        }
        
        return ans;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        int copy[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
            copy[i]=arr[i];
        }
        System.out.println(Arrays.toString(rank(arr,copy)));
        
    }
}

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than [n/2] times. 
You may assume that the majority element always exists in the array.

Sample testcase

case=1
input=3
3 2 3
output=3

case=2
input=7
2 2 1 1 1 2 2
output=2

import java.util.*;
public class test{
    public static int majority(int arr[]){
        int n=arr.length;
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<n;i++){
            hm.put(arr[i],hm.getOrDefault(arr[i],0)+1);
        }
        for(Integer x:hm.keySet()){
            if(hm.get(x)>(n/2)){
                return x;
            }
        }
        return -1;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println(majority(arr));
    }
}


Write an algorithm to determine if a number n is happy.
A happy number is a number defined by the following process:
Starting with any positive integer, replace the number by the sum of the 
squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it 
loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

Sample testcase
case=1
input=19
output=true

Explanation:
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

case=2
input=368
output=true







