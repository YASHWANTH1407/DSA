Given an array of integers nums which is sorted in ascending order, and an 
integer target, write a function to search target in nums. If target exists, 
then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

case=1
input=6
-1 0 3 5 9 12
9
output=4

Explanation: 9 exists in nums and its index is 4

case=2
input=6
-1 0 3 5 9 12
2
output=-1

Explanation: 2 does not exist in nums so return -1

Sollution:
import java.util.*;
public class test{
    public static int  findindex(int arr[],int target){
        int n=arr.length;
        int left=0;
        int right=n-1;
        int index=0;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(arr[mid]==target){
                return mid;
            }
            else if(arr[mid]>target){
               right=mid-1;
            }
            else{
                left=mid+1;
            }
        }
        return -1;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int target=sc.nextInt();
        System.out.println(findindex(arr,target));
    }
}

Given a sorted array of distinct integers and a target value, return the index 
if the target is found. If not, return the index where it would be if it were 
inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Sample test case

case=1
input=4
1 3 5 6
5
output=2

case=2
input=4
1 3 5 6
2
output=1

case=3
input=4
1 3 5 6
7
output=4


Solution:
import java.util.*;
public class test{
    public static int findindex(int arr[],int target){
        int left=0;
        int right=arr.length-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(arr[mid]==target){
                return mid;
            }
            else if(arr[mid]>target){
                right=mid-1;
                // if(arr[left]<target && target>arr[right]){
                    // return left+1;
                // }
            }
            else{
                left=mid+1;
                // if(arr[right]<target  && target>arr[left]){
                    // return right+1;
                // }
            }
        }
        return left;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int target=sc.nextInt();
        System.out.println(findindex(arr,target));
    }
}



Given a positive integer n, you can apply one of the following operations:

If n is even, replace n with n / 2.
If n is odd, replace n with either n + 1 or n - 1.
Return the minimum number of operations needed for n to become 1.

case=1
input=8
output=3
Explanation: 8 -> 4 -> 2 -> 1

case=2
input=7
output=4
Explanation: 7 -> 8 -> 4 -> 2 -> 1
or 7 -> 6 -> 3 -> 2 -> 1

case=3
input=4
output=2
Explanation: 4 -> 2 -> 1


import java.util.*;
public class test{
    public static int minOper(int n){
        int operations=0;
        while(n>1){
            if(n%2==0){
                n/=2;
            }
            else if((n+1)%4==0 && n!=3){
                n=n+1;
            }
            else{
                n=n-1;
            }
            operations++;
        }
        return operations;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(minOper(n));
    }
}



You have n coins and you want to build a staircase with these coins. 
The staircase consists of k rows where the ith row has exactly i coins. 
The last row of the staircase may be incomplete.

Given the integer n, return the number of complete rows of the staircase 
you will build.

Sample test case

case=1
input=5
output=2
Explanation: Because the 3rd row is incomplete, we return 2.

case=2
input=8
output=3
Explanation: Because the 4th row is incomplete, we return 3.

Approach: Using Binary Search (O(log n))

1.	We need to find the maximum number of complete rows k such that:
	1+2+3+...+k <=n
2.	This forms a sum of the first k natural numbers:
(k*(k+1))/2 <= n
3.	We can use binary search to efficiently find the largest k where this 
condition holds.

import java.util.*;
public class practise_fs_test_1{
    public static int staircase(int n){
        int l=0;
        int r=n;
        int count=0;
        while(l<=r){
            int mid=l+(r-l)/2;
            long total=(long) mid*(mid+1)/2;
            if(total<=n){
                count=mid;
                l=mid+1;
            }
            else {
                r=mid-1;
            }

        }
        return count;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.println(staircase(n));

    }
}



You are given an array of characters letters that is sorted in 
non-decreasing order, and a character target. 
There are at least two different characters in letters.

Return the smallest character in letters that is lexicographically 
greater than target. If such a character does not exist, 
return the first character in letters.

case=1
input=cfj
a
output=c
Explanation: The smallest character that is lexicographically greater 
than 'a' in letters is 'c'.

case=2
input=cfj
c
output=f
Explanation: The smallest character that is lexicographically greater 
than 'c' in letters is 'f'.

case=3
input=xxyy
z
output=x
Explanation: There are no characters in letters that is 
lexicographically greater than 'z' so we return letters[0].



import java.util.*;
public class test{
    public static char findsmall(char arr[],char ch){
        char result=arr[0];
        int l=0;
        int r=arr.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
           
            if(arr[mid]>ch){
                 result= arr[mid];
                r=mid-1;
               
                
            }
            else{
                l=mid+1;
            }
        }
        return result;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        char arr[]=str.toCharArray();
        char ch=sc.next().charAt(0);
        System.out.println(findsmall(arr,ch));
    }
}



/*
You are given an m x n integer matrix matrix with the following two properties:
1. Each row is sorted in non-decreasing order.
2. The first integer of each row is greater than the last integer of 
the previous row.

Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.

Note: you need to implement the method SearchIn2DMatrix()

case=1
input=3 4
1 3 5 7
10 11 16 20
23 30 34 60
3
output=true

case=2
input=3 4
1 3 5 7
10 11 16 20
23 30 34 60
33
output=false
*/

import java.util.*;
class Solution
{
    boolean SearchIn2DMatrix(int[][] matrix, int target)
    {
        // Implement your code here
        int rows=matrix.length;
        int cols=matrix[0].length;
        int left=0;
        int right=(rows*cols)-1;
        while(left<=right){
            
            int mid=left+(right-left)/2;
            int r=mid/cols;
            int c=mid %cols;
            if(matrix[r][c]==target){
                return true;
            }
            else if(matrix[r][c]<target){
                left=mid+1;
            }
            else{
                right=mid-1;
            }
        }
        return false;
        
    }

    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();

        int[][] matrix = new int[m][n];

        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                matrix[i][j] = sc.nextInt();
            }
        }

        int target = sc.nextInt();
        
        boolean result = new Solution().SearchIn2DMatrix(matrix, target);
        System.out.println(result);
    }
}
 


A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return 
its index. If the array contains multiple peaks, return the index to 
any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an 
element is always considered to be strictly greater than a neighbor 
that is outside the array.
You must write an algorithm that runs in O(log n) time.

case=1
input=4
1 2 3 1
output=2
Explanation: 3 is a peak element and your function should return the 
index number 2.

case=2
input=7
1 2 1 3 5 6 4
output=5
Explanation: Your function can return either index number 1 where 
the peak element is 2, or index number 5 where the peak element is 6.

case=3
input=8
3 5 7 7 7 8 10 14
output=7


import java.util.*;
public class test{
    public static int returnIndex(int arr[]){
        int left=0;
        int right=arr.length-1;
        while(left<right){
            int mid=left+(right-left)/2;
           
            if(arr[mid]>arr[mid+1]){
                right=mid;
            }
            else{
                left=mid+1;
            }
            
        }
        return left;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println(returnIndex(arr));
    }
}

There is an integer array nums sorted in ascending order 
(with distinct values).

Prior to being passed to your function, nums is possibly rotated at an 
unknown pivot index k (1 <= k < nums.length) such that the resulting array is 
[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] 
(0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot 
index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, 
return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

case=1
input=7
4 5 6 7 0 1 2
0
output=4

case=2
input=7
4 5 6 7 0 1 2
3
output=-1

case=3
input=1
1
0
output=-1


import java.util.Scanner;

public class test {

    public static int search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid;
            }
            
            if (nums[left] <= nums[mid]) {
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        
        return -1;
    }

    public static void getInputAndSearch() {
        Scanner scanner = new Scanner(System.in);
        
        int n = scanner.nextInt();
        int[] nums = new int[n];
        
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }
        
        int target = scanner.nextInt();
        
        System.out.println(search(nums, target));
        
        scanner.close();
    }

    public static void main(String[] args) {
        getInputAndSearch();
    }
}


Given an array of integers nums sorted in non-decreasing order, find the 
starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

case=1
input=6
5 7 7 8 8 10
8
output=[3, 4]

case=2
input=6
5 7 7 8 8 10
6
output=[-1, -1]

case=3
input=7
5 7 7 7 8 9 10
8
output=[4, 4]


import java.util.*;
public class test{
    public static int[] position(int arr[],int k){
        int first=-1,second=-1;
        int l=0;
        int r=arr.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(arr[mid]==k){
                first=mid;
                r=mid-1;
            }
            else if(arr[mid]<k){
               l=mid+1;
            }
            else {
                r=mid-1;
            }
            
        }
        
        l=0;
        r=arr.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(arr[mid]==k){
                second=mid;
                l=mid+1;
            }
            else if(arr[mid]<k){
                l=mid+1;
            }
            else{
                r=mid-1;
            }
        }
        
        return new int[]{first,second};
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int k=sc.nextInt();
        
        int finarr[]=position(arr,k);
        for(int i=0;i<finarr.length;i++){
    System.out.println(finarr[i]);
}
    }
}


You are given an integer mountain array arr of length n where the values 
increase to a peak element and then decrease.
Return the index of the peak element.
Your task is to solve it in O(log(n)) time complexity.

case=1
input=3
0 1 0
output=1

case=2
input=4
0 2 1 0
output=1

case=3
input=7
0 5 10 12 15 5 2
output=4

import java.util.*;
public class test{
    public static int findindex(int arr[]){
        int l=0;
        int r=arr.length-1;
        while(l<r){
            int mid=l+(r-l)/2;
            if(arr[mid]>arr[mid+1]){
                r=mid;
            }
            else{
                l=mid+1;
            }
        }
        return l;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println(findindex(arr));
    }
}



Given an array of points where points[i] = [xi, yi] represents a point on the 
X-Y plane and an integer k, return the k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance 
(i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
You may return the answer in any order. The answer is guaranteed to be 
unique (except for the order that it is in).

case=1
input=2
1 3
-2 2
1
output=[[-2, 2]]

Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just 
[[-2,2]].

case=2
input=3
3 3 
5 -1
-2 4
2
output=[[3, 3], [-2, 4]]

Explanation: The answer [[-2,4],[3,3]] would also be accepted.



import java.util.*;

public class test

{
    public static int[][] kClosest(int[][] points, int k) {
        quickSelect(points, 0, points.length - 1, k);
        return Arrays.copyOfRange(points, 0, k);
}
    // Quickselect function
    public static void quickSelect(int[][] points, int left, int right, int k) {
        if (left < right) {
            int pivotIndex = partition(points, left, right);
            int count = pivotIndex - left + 1; // Elements on the left side including pivot
            if (count == k) return;
            else if (count > k) quickSelect(points, left, pivotIndex - 1, k);
            else quickSelect(points, pivotIndex + 1, right, k - count);
     }
  }
    // Partition based on distance from origin
    public static int partition(int[][] points, int left, int right) {
        int[] pivot = points[right];
        int pivotDist = distance(pivot);
        int i = left;
        for (int j = left; j < right; j++){
            if (distance(points[j]) <= pivotDist){
                swap(points, i, j);
                i++;
            }
}
        swap(points, i, right);
        return i;
  }
   // Euclidean distance squared
    public static int distance(int[] point) {
        return point[0] * point[0] + point[1] * point[1];
     }
    // Swap function
    public static void swap(int[][] points, int i, int j) {
        int[] temp = points[i];
        points[i] = points[j];
        points[j] = temp;
}
    // Main function for testing
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();  // Number of points
        int[][] points = new int[n][2];
        for (int i = 0; i < n; i++){
            points[i][0] = sc.nextInt();
            points[i][1] = sc.nextInt();
         }
        int k = sc.nextInt();  // Number of closest points

        int[][] result = kClosest(points, k);
        for (int[] p : result) 

{


            System.out.println(Arrays.toString(p));
        

}
    

}

}


Given an integer array nums, find the subarray with the largest sum, and 
return its sum.

case=1
input=9
-2 1 -3 4 -1 2 1 -5 4
output=6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

case=2
input=1
1
output=1
Explanation: The subarray [1] has the largest sum 1.

case=3
input=5
5 4 -1 7 8
output=23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.



import java.util.*;

public class test 

{


    
    public static int maxSubArray(int[] nums) 

{


        return helper(nums, 0, nums.length - 1);
    

}

    public static int helper(int[] nums, int low, int high) 

{


        if (low == high) return nums[low]; // Base case: one element

        int mid = low + (high - low) / 2;

        int leftMax = helper(nums, low, mid);
        int rightMax = helper(nums, mid + 1, high);
        int crossMax = maxCrossingSum(nums, low, mid, high);

        return Math.max(Math.max(leftMax, rightMax), crossMax);
    

}

    public static int maxCrossingSum(int[] nums, int low, int mid, int high) 

{


        int leftSum = Integer.MIN_VALUE;
        int sum = 0;
        for (int i = mid; i >= low; i--) 

{


            sum += nums[i];
            leftSum = Math.max(leftSum, sum);
        

}

        int rightSum = Integer.MIN_VALUE;
        sum = 0;
        for (int i = mid + 1; i <= high; i++) 

{


            sum += nums[i];
            rightSum = Math.max(rightSum, sum);
        

}

        return leftSum + rightSum;

        }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int nums[] = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
            }
        int result = maxSubArray(nums);
        System.out.println(result);
    }
}


Given an integer array nums and an integer k, return the k most frequent 
elements. You may return the answer in any order.

Sample test case

case=1
input=6
1 1 1 2 2 3
2
output=[1, 2]

case=2
input=1
1
1
output=[1]



import java.util.*;
public class test{
    public static int[] KFreq(int arr[],int low,int high,int k){
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            hm.put(arr[i],hm.getOrDefault(arr[i],0)+1);
        }
        List<Integer> unique=new ArrayList<>(hm.keySet());
        int newarr[]=new int[unique.size()];
        for(int i=0;i<unique.size();i++){
            newarr[i]=unique.get(i);
        }
        
        quickSelect(hm,newarr,0,newarr.length-1,newarr.length-k);
        
     int result[]=new int[k];
     for(int i=0;i<k;i++){
         result[i]=newarr[newarr.length-k+i];
     }
     return result;
    }
    public static void quickSelect(HashMap<Integer,Integer> hm,int arr[],int low,int high,int k){
        if(low<=high){
            int pivot=divide(hm,arr,low,high);
            if(pivot==k){
                return;
            }
            else if(pivot>k){
                quickSelect(hm,arr,low,pivot-1,k);
            }
            else{
                quickSelect(hm,arr,pivot+1,high,k);
            }
        }
    }        
        public static int divide(HashMap<Integer,Integer> hm,int arr[],int low,int high){
         
         int pivot=hm.get(arr[high]);
         int i=low;
         
         for(int j=low;j<high;j++){
             if(hm.get(arr[j])>pivot){
                 int temp=arr[i];
                 arr[i]=arr[j];
                 arr[j]=temp;
                 i++;
             }
         }
         
         int temp=arr[i];
         arr[i]=arr[high];
         arr[high]=temp;
         
         return i;
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int k=sc.nextInt();
        
        
        int result[]=KFreq(arr,0,n-1,k);
        System.out.println(Arrays.toString(result));
    }
}




Write an efficient algorithm that searches for a value target in 
an m x n integer matrix matrix. This matrix has the following properties:
Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

case=1
input=5 5
1 4 7 11 15
2 5 8 12 19
3 6 9 16 22
10 13 14 17 24
18 21 23 26 30
5
output=true

case=2
input=5 5
1 4 7 11 15
2 5 8 12 19
3 6 9 16 22
10 13 14 17 24
18 21 23 26 30
20
output=false



/*import java.util.*;
public class test{
    public static boolean isFound(int arr[][],int target){
        int rows=arr.length;
        int cols=arr[0].length;
       int left=0;
       int right=rows*cols-1;
       while(left<=right){
           int mid=left+(right-left)/2;
           int r=mid/cols;
           int c=mid%cols;
           if(arr[r][c]==target){
               return true;
           }
           else if(arr[r][c]<target){
               left=mid+1;
           }
           else{
               right=mid-1;
           }
           
           
       }
       return false;
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
       int m=sc.nextInt();
       int n=sc.nextInt();
       int arr[][]=new int[m][n];
       
       for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
               arr[i][j]=sc.nextInt();
           }
       }
       int target=sc.nextInt();
       System.out.println(isFound(arr,target));
    }
}    */

import java.util.*;
public class test{
    public static boolean isFound(int arr[][],int target){
        int rows=arr.length-1;
        int cols=arr[0].length-1;
        
        return search(arr,target,0,0,rows,cols);
    }
    public static boolean search(int arr[][],int target,int startrow,int startcol,int endrow,int endcol){
        if(startrow>endrow || startcol>endcol){
            return false;
        }
        
        int row_mid=startrow+(endrow-startrow)/2;
        int col_mid=startcol+(endcol-startcol)/2;
        int mid_val=arr[row_mid][col_mid];
        
        if(mid_val==target){
            return true;
        }
        else if(mid_val>target){  //top left and top right and (bottom left)
            return search(arr,target,startrow,startcol,row_mid-1,endcol) || search(arr,target,row_mid,startcol,endrow,col_mid-1);
            
        }
        else{//searching for the bottom right,bottom left,
            return search(arr,target,row_mid+1,startcol,endrow,endcol) || search(arr,target,startrow,col_mid+1,row_mid,endcol);
        }
    }
     public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
       int m=sc.nextInt();
       int n=sc.nextInt();
       int arr[][]=new int[m][n];
       
       for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
               arr[i][j]=sc.nextInt();
           }
       }
       int target=sc.nextInt();
       System.out.println(isFound(arr,target));
    }
    
}
Given a string s and an integer k, return the length of the longest substring 
of s such that the frequency of each character in this substring is greater 
than or equal to k.

if no such substring exists, return 0.

case=1
input=aaabb
3
output=3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.

case=2
input=ababbc
2
output=5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times 
and 'b' is repeated 3 times.



import java.util.*;
public class test{
    public static int longestSubString(String str){
        int n=str.length();
        int l=0;
        int r=0;
        
        for(int r=0;r<str.length()-1;r++){
            int x=r-l+1;
            String sub=str.subString(l,r);
            
            
        }
        
        
        
        for(int i=0;i<)
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(Sytem.in);
        String str=sc.next();
        longestSubString(str);
    }
}

