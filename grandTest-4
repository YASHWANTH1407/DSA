Given an array of integers nums and an integer target, return indices of the 
two numbers such that they add up to target.
You should not use the same element twice. If there are not two numbers that 
add up to target, then return empty list.

Sample testcase

case=1
input=4
2 7 11 15
9
output=[0, 1]

Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

case=3
input=3
11 2 15 7 5
14
output=[]


import java.util.*;
public class test{
    public static int[] sum(int arr[],int target){
        int arr1[]=new int[2];
        int start=0;
        int end=arr.length-1;
        // while(start<end){
        //     if(arr[start]+arr[end]==target){
        //         arr1[0]=start;
        //         arr1[1]=end;
        //     }
        //     else if(arr[start]>arr[end]){
        //         end--;
        //     }
        //     else if(arr[start]<arr[end]){
        //         start++;
        //     }
            
        // }
        for(int i=0;i<arr.length-1;i++){
            int j=i+1;
            if(arr[i]+arr[j]==target){
                arr1[0]=i;
                arr1[1]=j;
            }
        }
        return arr1;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int target=sc.nextInt();
        System.out.println(Arrays.toString(sum(arr,target)));
    }
}


Given an m x n 2D binary grid which represents a map of '1's (land) and 
'0's (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent 
lands horizontally or vertically. You may assume all four edges of the 
grid are all surrounded by water.

case=1
input=4 5
1 1 1 1 0
1 1 0 1 0
1 1 0 0 0
0 0 0 0 0
output=1

case=2
input=4 5
1 1 0 0 0
1 1 0 0 0
0 0 1 0 0
0 0 0 1 1
output=3



import java.util.*;
public class test{
    public static int Islands(int arr[][]){
        if(arr.length==0 || arr==null){
            return 0;
        }
        int count=0;
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[0].length;j++){
                if(arr[i][j]==1){
                    count++;
                    dfs(i,j,arr);
                }
            }
        }
        return count;
    }
    public static void dfs(int row,int col,int arr[][]){
        int rlen=arr.length;
        int clen=arr[0].length;
        if(row<0 || row>=rlen || col<0 || col>=clen || arr[row][col]!=1){
            return ;
        }
        // int vertices={{1,0},{0,1},{0,-1},{-1,0}};
        
        // for(int i=0;i<4;i++){
            
        // }
        arr[row][col]=0;
        dfs(row+1,col,arr);
        dfs(row,col+1,arr);
        dfs(row-1,col,arr);
        dfs(row,col-1,arr);
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        int arr[][]=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                arr[i][j]=sc.nextInt();
            }
        }
        System.out.println(Islands(arr));
        
        
        
    }
}

You are given an integer array nums. You are initially positioned at the 
array's first index, and each element in the array represents your maximum 
jump length at that position.

Return true if you can reach the last index, or false otherwise.

Sample test case

case=1
input=5
2 3 1 1 4
output=true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

case=2
input=5
3 2 1 0 4
output=false
Explanation: You will always arrive at index 3 no matter what. Its maximum 
jump length is 0, which makes it impossible to reach the last index.



import java.util.*;
public class test{
    public static boolean jump(int arr[]){
        for(int i=0;i<arr.length;i++){
            int count=0;
            if(arr[i]!=0){
                for(int j=1;j<arr[i];j++){
                    count++;
                    if(count+arr[j]==arr.length-1){
                        return true;
                        
                    }
                }
            }
        }
        return false;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println(jump(arr));
    }
}


Given an array of integers nums, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in O(nlog(n)) 
time complexity and with the smallest space complexity possible.

Note: Use Merge Sort Algorithm
 
Sample test case
case=1
input=4
5 2 3 1
output=[1, 2, 3, 5]

Explanation: After sorting the array, the positions of some numbers are not 
changed (for example, 2 and 3), while the positions of other numbers are 
changed (for example, 1 and 5).

case=2
input=6
5 1 1 2 0 0
output=[0, 0, 1, 1, 2, 5]
Explanation: Note that the values of nums are not necessarily unique.


import java.util.*;
public class test{
   public static void mergeSort(int arr[],int low,int high){
       if(low<high){
           int mid=low+(high-low)/2;
           mergeSort(arr,low,mid);
           mergeSort(arr,mid+1,high);
           merge(arr,low,mid,high);
       }
   }
   public static void merge(int arr[],int low,int mid,int high){
       int arr1[]=new int[mid-low+1];
       int arr2[]=new int[high-mid];
       
       for(int i=0;i<arr1.length;i++){
           arr1[i]=arr[low+i];
       }
       for(int j=0;j<arr2.length;j++){
           arr2[j]=arr[mid+1+j];
       }
       
       int i=0,j=0,k=low;
       while(i<arr1.length && j<arr2.length){
           if(arr1[i]<=arr2[j]){
               arr[k++]=arr1[i++];
           }
           else{
               arr[k++]=arr2[j++];
           }
       }
       
       while(i<arr1.length){
           arr[k++]=arr1[i++];
       }
       while(j<arr2.length){
           arr[k++]=arr2[j++];
       }
   }
   
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int low=0;
        int high=arr.length-1;
        mergeSort(arr,low,high);
        System.out.println(Arrays.toString(arr));
    }
}


Given an integer array nums, return the length of the longest strictly 
increasing subsequence.

case=1
input=8
10 9 2 5 3 7 101 18
output=4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore 
the length is 4.

case=2
input=6
0 1 0 3 2 3
output=4

case=3
input=7
7 7 7 7 7 7 7
output=1


import java.util.*;
public class test{
    public static int longest(int arr[]){
        int dp[]=new int[arr.length];
        Arrays.fill(dp,1);
        int max=1;
        for(int i=0;i<arr.length-1;i++){
            for(int j=i+1;j<arr.length;j++){
                if(arr[j]<arr[i]){
                    break;
                }
                if(arr[j]>arr[i]){
                    dp[i]+=1;
                    max=Math.max(max,dp[i]);
                }
                
            }
        }
        return max;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println(longest(arr));
    }
}

You have a graph of n nodes. You are given an integer n and an array edge 
where edges[i] = [ai, bi] indicates that there is an edge between ai and bi 
in the graph.

Return the number of connected components in the graph using Union find.

Sample testcase
 
case=1
input=5 3
0 1
1 2
3 4
output=2

Explanation:
Input: first line contains ‘n’ number of nodes and ‘m’ number of edges, 
followed by value for m edges.
Output: 2. First component having nodes 0, 1, 2 and second component having
nodes 3, 4

case=2
input=5 4
0 1
1 2
2 3
3 4
output=1


import java.util.*;
import java.io.*;

class DS
{
    int parent[],rank[];
    int n;
    
    DS (int n)
    {
        rank= new int[n+1];
        parent= new int[n+1];
        this.n=n;
        for(int i=0;i<n;i++)
        {
            parent[i]=i;
            rank[i]=1;
        }
    }
    
    public int find(int i)
    {
        if(parent[i]==i)
        {
            return i;
        }
        return parent[i]= find(parent[i]);
    }
    
    public void union(int x,int y)
    {
        int rootx= find(x);
        int rooty= find(y);
        
        if(rootx!=rooty)
        {
            if(rank[rootx]>rank[rooty])
            {
                parent[rooty]=rootx;
            }
            else if(rank[rootx]<rank[rooty])
            {
                parent[rootx]=rooty;
            }
            else
            {
                parent[rooty]=rootx;
                rank[rootx]++;
            }
        }
    }
    
    public static void main(String[] arg)
    {
        Scanner sc= new Scanner(System.in);
        int n= sc.nextInt();
        int m= sc.nextInt();
        DS ds= new DS(n);
        
        for(int i=0;i<m;i++)
        {
            int x= sc.nextInt();
            int y= sc.nextInt();
            ds.union(x,y);
        }
        
        int count=0;
        for(int i=0;i<n;i++)
        {
            if(ds.find(i)==i)
            {
                count++;
            }
        }
        
        System.out.println(count);
    }
}



