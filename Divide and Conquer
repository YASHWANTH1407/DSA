Given an array of integers nums, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in O(nlog(n)) 
time complexity and with the smallest space complexity possible.

Note: ***********Use Merge Sort Algorithm****************

Sample test case
case=1
input=4
5 2 3 1
output=[1, 2, 3, 5]

Explanation: After sorting the array, the positions of some numbers are not 
changed (for example, 2 and 3), while the positions of other numbers are 
changed (for example, 1 and 5).

case=2
input=6
5 1 1 2 0 0
output=[0, 0, 1, 1, 2, 5]
Explanation: Note that the values of nums are not necessarily unique.


import java.util.*;
public class test{
    public static void mergeSort(int arr[],int low,int high){
        if(low<high){
            int mid=low+(high-low)/2;
            mergeSort(arr,low,mid);
            mergeSort(arr,mid+1,high);
            merge(arr,low,mid,high);
            }
        }
        public static void merge(int arr[],int low,int mid,int high){
            int arr1[]=new int[mid-low+1];
            int arr2[]=new int[high-mid];
          
           
           for(int i=0;i<arr1.length;i++){
               arr1[i]=arr[low+i];
           }
           for(int j=0;j<arr2.length;j++){
               arr2[j]=arr[mid+1+j];
           }
            int i=0;
           int j=0;
           int k=low;
           while(i<arr1.length && j<arr2.length){
               if(arr1[i]<=arr2[j]){
                   arr[k++]=arr1[i++];
               }
               else {
                   arr[k++]=arr2[j++];
               }
               
           }
           while(i<arr1.length){
               arr[k++]=arr1[i++];
           }
           while(j<arr2.length){
               arr[k++]=arr2[j++];
           }
        }
    
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int low=0;
        int high=arr.length-1;
        mergeSort(arr,low,high);
        System.out.println(Arrays.toString(arr));
    }
}

Given an array of integers nums, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in O(nlog(n)) 
time complexity and with the smallest space complexity possible.

Note: Use********** Quick Sort Algorithm*************

Sample test case
case=1
input=4
5 2 3 1
output=[1, 2, 3, 5]

Explanation: After sorting the array, the positions of some numbers are not 
changed (for example, 2 and 3), while the positions of other numbers are 
changed (for example, 1 and 5).

case=2
input=6
5 1 1 2 0 0
output=[0, 0, 1, 1, 2, 5]
Explanation: Note that the values of nums are not necessarily unique.


import java.util.*;
public class test{
    public static void quickSort(int arr[],int low,int high){
        if(low<high){
            int pivot=partiton(arr,low,high);
            
            quickSort(arr,low,pivot-1);
            quickSort(arr,pivot+1,high);
        }
     
    }
    public static int partiton(int arr[],int low,int high){
        int pivot=arr[high];
        int i=low;
        
        
        for(int j=low;j<high;j++){
            if(arr[j]<pivot){
                
                
                //swap
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
                
                i++;
                
            }
            
        }
        //swap higher than pivot elements
        int temp=arr[i];
        arr[i]=arr[high];
        arr[high]=temp;
        return i;
        
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        quickSort(arr,0,arr.length-1);
        
        for(int num:arr){
            System.out.println(num+" ");
        }
    }
}


Given an integer array nums and an integer k, return the kth largest element 
in the array.
Note that it is the kth largest element in the sorted order, 
not the kth distinct element.

Can you solve it without sorting?

case=1
input=6
3 2 1 5 6 4
2
output=5

case=2
input=9
3 2 3 1 2 4 5 5 6
4
output=4



import java.util.*;
public class test{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int k=sc.nextInt();
        
        PriorityQueue <Integer> pq=new PriorityQueue <>();
        
        for(int num:arr){
            pq.offer(num);
            if(pq.size()>k){
                pq.poll();
            }
        }
        System.out.println(pq.peek());
    }
}


--------------------
Given an integer array nums and an integer k, return the k most frequent 
elements. You may return the answer in any order.

Sample test case

case=1
input=6
1 1 1 2 2 3
2
output=[1, 2]

case=2
input=1
1
1
output=[1]



import java.util.*;
public class test{
    public static int[] KFreq(int arr[],int low,int high,int k){
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            hm.put(arr[i],hm.getOrDefault(arr[i],0)+1);
        }
        
        List<Integer> unique=new ArrayList<>(hm.keySet());
        int newarr[]=new int[unique.size()];
        for(int i=0;i<unique.size();i++){
            newarr[i]=unique.get(i);
        }
        
        quickSelect(hm,newarr,0,newarr.length-1,newarr.length-k);
        
     int result[]=new int[k];
     for(int i=0;i<k;i++){
         result[i]=newarr[newarr.length-k+i];
     }
     return result;
    }
    public static void quickSelect(HashMap<Integer,Integer> hm,int arr[],int low,int high,int k){
        if(low<=high){
            int pivot=divide(hm,arr,low,high);
            if(pivot==k){
                return;
            }
            else if(pivot>k){
                quickSelect(hm,arr,low,pivot-1,k);
            }
            else{
                quickSelect(hm,arr,pivot+1,high,k);
            }
        }
    }        
        public static int divide(HashMap<Integer,Integer> hm,int arr[],int low,int high){
         
         int pivot=hm.get(arr[high]);
         int i=low;
         
         for(int j=low;j<high;j++){
             if(hm.get(arr[j])>pivot){
                 int temp=arr[i];
                 arr[i]=arr[j];
                 arr[j]=temp;
                 i++;
             }
         }
         
         int temp=arr[i];
         arr[i]=arr[high];
         arr[high]=temp;
         
         return i;
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int k=sc.nextInt();
        
        
        int result[]=KFreq(arr,0,n-1,k);
        System.out.println(Arrays.toString(result));
    }
}

Given an integer array nums, find the subarray with the largest sum, and 
return its sum.

case=1
input=9
-2 1 -3 4 -1 2 1 -5 4
output=6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

case=2
input=1
1
output=1
Explanation: The subarray [1] has the largest sum 1.

case=3
input=5
5 4 -1 7 8
output=23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.


-
--------------
-
--


-
----------------provide the answer fot thei quesioten



Given an array of points where points[i] = [xi, yi] represents a point on the 
X-Y plane and an integer k, return the k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance 
(i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
You may return the answer in any order. The answer is guaranteed to be 
unique (except for the order that it is in).

case=1
input=2
1 3
-2 2
1
output=[[-2, 2]]

Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just 
[[-2,2]].

case=2
input=3
3 3 
5 -1
-2 4
2
output=[[3, 3], [-2, 4]]

Explanation: The answer [[-2,4],[3,3]] would also be accepted.








