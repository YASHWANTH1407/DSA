*****DAY-16-PROBLEMS ON STACK DATA STRUCTURE
1>
Given a string s, return true if it is a palindrome, false otherwise.
A string is a palindrome if it reads the same forward as backward. That means; 
after reversing it, it is still the same string. 
For example: "abcdcba", or "racecar".

Note: Use stack data structure. A stack data structure with methods are provided, 
you just need to implement the isValid (), this method returns true for 
palindrome, else false.

Sample test case 
case=1
input=abcdcba
output=true

case=2
input=raceacar
output=false

Solution 1:
import java.util.*;
class test{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        System.out.print(ispal(s));
        
    }
    public static boolean ispal(String s){
        //Stack<Character> st = new Stack<>();
        Deque<Character> st = new ArrayDeque<>();
        for(char c : s.toCharArray()){
            st.push(c);
        }
        for(char ch : s.toCharArray()){
            char top = st.pop();
            if(ch!= top){
                return false;
            }
        }
        return true;
    }
}

Solution 2:
import java.util.*;
public class test{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        Deque<Character> st=new ArrayDeque<>();
        for(int i=0;i<str.length();i++){
            st.push(str.charAt(i));
        }
        StringBuilder sb=new StringBuilder();
        while(!st.isEmpty()){
            sb.append(st.pop());
        }
        String reversed=str.toString();
        if(str.equals(reversed)){
            System.out.println("true");
        }
        else{
            System.out.println("false");
        }
        
    }
}

2>
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', 
determine if the input string is valid.

An input string is valid if:
1. Open brackets must be closed by the same type of brackets.
2. Open brackets must be closed in the correct order.
3. Every close bracket has a corresponding open bracket of the same type.

Note: You can use Deque Collections interface for Stack.

Sample test case

case=1
input=[](){}
output=true

case=2
input={][}
output=false

case=3
input={[()]
output=false

Solution1:
import java.util.*;
public class test{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        Deque<Character> st=new ArrayDeque<>();
        for(int i=0;i<str.length();i++){
            char ch=str.charAt(i);
            if(ch=='(' || ch=='[' || ch=='{'){
                st.push(ch);
            }
            if(ch==')'  && st.peek()=='('){
                st.pop();
            }
            if(ch==']'  && st.peek()=='['){
                st.pop();
            }
            if(ch=='}'  && st.peek()=='{'){
                st.pop();
            }
            
        }
        if(st.isEmpty()){
            System.out.println("true");
        }
        else{
            System.out.println("false");
        }
    }
}


Solution2:
import java.util.*;
class test{
    public static void main(String args[] ){
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        System.out.print(isvalidP(s));
    }
    public static boolean isvalidP(String s){
        Deque<Character> st = new ArrayDeque<>();
        for(char ch : s.toCharArray()){
            if(ch == '(' ||ch == '{' || ch == '[' ){
                st.push(ch);
            }
            else{
                char top = st.pop();
                if((top == '(' && ch != ')') || (top == '[' && ch != ']') || (top == '{' && ch != '}')){
                    return false;
                }
            }
        }
        return st.isEmpty();
    }
}
Solution 3:
import java.util.*;
class test{
    public static boolean isValid(String s){
        Deque<Character> stack=new ArrayDeque<>();
        HashMap<Character,Character>map=new HashMap<>();
        map.put(')','(');
        map.put('}','{');
        map.put(']','[');
        for(char c:s.toCharArray()){
        if(map.containsValue(c)){
            stack.push(c);
        }
        else if(map.containsKey(c)){
            if(stack.isEmpty()||map.get(c)!=stack.pop()){
                return false;
            }
        }
    }
    return stack.isEmpty();
}
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        System.out.println(isValid(s));
    }
}


3>
You are given an integer array prices where prices[i] is the price of the 
ith item in a shop.

There is a special discount for items in the shop. If you buy the ith item, then 
you will receive a discount equivalent to prices[j] where j is the minimum index 
such that j > i and prices[j] <= prices[i]. Otherwise, you will not receive any 
discount at all.

Return an integer array answer where answer[i] is the final price you will pay 
for the ith item of the shop, considering the special discount.

Note: You can use Deque Collections interface for Stack.
 
Sample testcase

case=1
input=5
8 4 6 2 3
output=[4, 2, 4, 2, 3]

Explanation: 
For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, 
therefore, the final price you will pay is 8 - 4 = 4.
For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, 
therefore, the final price you will pay is 4 - 2 = 2.
For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, 
therefore, the final price you will pay is 6 - 2 = 4.
For items 3 and 4 you will not receive any discount at all.

case=2
input=5
1 2 3 4 5
output=[1, 2, 3, 4, 5]

Explanation: In this case, for all items, you will not receive any discount at all.

Solution:


import java.util.*;
public class test{
    public static void afterdiscount(int arr[]){  //8 4 6 2 3
        int n=arr.length;                                         
        Deque<Integer> st=new ArrayDeque<>();
        int discount[]=new int[n];
        
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && arr[i]<=arr[st.peek()]){
                int id=st.pop();
                discount[id]=arr[id]-arr[i];
            }
            st.push(i);
        }
       while(!st.isEmpty()){
           int id=st.pop();
           discount[id]=arr[id];
       }
       System.out.print(Arrays.toString(discount));
       
    }
    public static void main(String[] args){
        
        Scanner sc=new Scanner (System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<arr.length;i++){
            arr[i]=sc.nextInt();
        }
        // for(int i=0;i<n;i++){
        afterdiscount(arr);
        
    // }
}
}
4>
Given two strings s and t, return true if they are equal when both are typed 
into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.

Note: You can use Deque Collections interface for Stack.

Sample testcase
case=1
input=ab#c
ad#c
output=true

Explanation: Both s and t become "ac".

case=2
input=ab##
c#d#
output=true
Explanation: Both s and t become "".

case=3
input=a#c
b
output=false

Explanation: s becomes "c" while t becomes "b".


Solution 1:
import java.util.*;
class test {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        String t = sc.next();
        System.out.print(eqStrings(s, t));
    }
    public static boolean eqStrings(String s, String t) {
        Deque<Character> st1 = new ArrayDeque<>();
        Deque<Character> st2 = new ArrayDeque<>();

        for (char c : s.toCharArray()) {
            if (c != '#') {
                st1.push(c);
            } else if (!st1.isEmpty()) {
                st1.pop();  
            }
        }
        for (char c : t.toCharArray()) {
            if (c != '#') {
                st2.push(c);
            } else if (!st2.isEmpty()) {
                st2.pop(); 
            }
        }

        while (!st1.isEmpty() && !st2.isEmpty()) {
            if (st1.pop() != st2.pop()) {
                return false;
            }
        }
        return true;
    }
}

Solution 2:

import java.util.*;
public class test{
    public static boolean isEqual(String str,String str2){
        Deque<Character> st1=new ArrayDeque<>();
        Deque<Character> st2=new ArrayDeque<>();
        for(int i=0;i<str.length();i++){
            char ch=str.charAt(i);
            if(ch=='#'){
                st1.pop();
            }
            st1.push(ch);
            
        }
        StringBuilder sb=new StringBuilder();
        while(!st1.isEmpty()){
            sb.append(st1.pop());
        }
        String x=sb.toString();
        
        
        for(int i=0;i<str2.length();i++){
            char ch1=str2.charAt(i);
            if(ch1=='#'){
                st2.pop();
            }
            st2.push(ch1);
            
        }
        StringBuilder sb1=new StringBuilder();
        while(!st2.isEmpty()){
            sb1.append(st2.pop());
        }
        String y=sb.toString();
        
        return x.equals(y);
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        String str2=sc.nextLine();
        System.out.println(isEqual(str,str2));
        
    }
}

5>

Write a java program for the below problem using stack.
You are given an array of strings tokens that represents an arithmetic 
expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the 
expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit 
integer.

Note: You can use Deque Collections interface for Stack.

Sample testcase

case=1
input=2 1 + 3 *
output=9
Explanation: ((2 + 1) * 3) = 9

case=2
input=4 13 5 / +
output=6
Explanation: (4 + (13 / 5)) = 6

case=3
input=10 6 9 3 + -11 * / * 17 + 5 +
output=22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

Solution:
import java.util.*;
public class test{
    public static int sum(String arr[]){
        Deque<Integer> st=new ArrayDeque<>();
        for(int i=0;i<arr.length;i++){
            if(arr[i].equals("+")){
                
                int x=st.pop();
                int y=st.pop();
                st.push(x+y);
                
            }
            else if(arr[i].equals("-")){
                int x=st.pop();
                int y=st.pop();
                st.push(y-x);
            }
           else  if(arr[i].equals("*")){
                int x=st.pop();
                int y=st.pop();
                st.push(y*x);
            }
           else if(arr[i].equals("/")){
                int x=st.pop();
                int y=st.pop();
                st.push(y/x);
            }
            else{
                st.push(Integer.parseInt(arr[i]));
            }
        }
        int sum=0;
        while(!st.isEmpty()){
            sum+=st.pop();
        }
        return sum;
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        String arr[]=str.split(" ");
        System.out.println(sum(arr));
    }
}

