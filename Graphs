1<Graph Creation 

Given number of vertices V and edges E, create a Graph class and implement the 
below methods
-	addEdge(), this method creates an edge between source and destination nodes.
-	displayGraph(), this method displays the graph as adjacency list representation.

case=1
input= 5 7
0 1
0 4
1 2
1 3
1 4
2 3
3 4
output=
Vertex 0: -> 1 -> 4
Vertex 1: -> 0 -> 2 -> 3 -> 4
Vertex 2: -> 1 -> 3
Vertex 3: -> 1 -> 2 -> 4
Vertex 4: -> 0 -> 1 -> 3

Explanation: First line: number of vertices followed by number of edges, 
followed by edges.



#SOlution:

import java.util.*;

class Graph {
    int vertices;
    List<Integer> adjList[];
    Graph(int v){
        vertices = v;
        adjList = new LinkedList[v];
        for(int i=0; i<v; i++){
            adjList[i] = new LinkedList<>();
        }
    }
    void addEdge(int src, int desc) {
        adjList[src].add(desc);
        adjList[desc].add(src);
    }
    void displayGraph(){
        for(int i=0; i<vertices; i++){
            System.out.print("Vertex " + i + ":");
            for(int neighbour : adjList[i]){
                System.out.print("-> " + neighbour);
            }
            System.out.println();
        }
    }
}

class test {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int vertices=sc.nextInt();
        Graph graph = new Graph(vertices);
        int nEdges=sc.nextInt();
        for(int i=0; i<nEdges; i++){
            int src = sc.nextInt();
            int desc = sc.nextInt();
            graph.addEdge(src, desc);
        }
        graph.displayGraph();
    }
}


2>Graph Travesals techniques.

/*
Given number of vertices V and edges E, a graph is created and represented 
in the form of adjacency list. Given the graph, perform a BFS traversal of the 
graph.
Note: you just need to implement the dfs() method.

case=1
input=5 7
0 1
0 4
1 2
1 3
1 4
2 3
3 4
0
output=[0, 4, 3, 2, 1]
Explanation: First line is the number of vertices followed by number of edges, 
followed by values for edges, followed by node to start the dfs.
class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/


Solution:
import java.util.*;
class Solution
{
    void dfs(Graph graph, int start, List<Integer> result)
    {
        // Implement your code here
        Deque<Integer> st=new ArrayDeque<>();
        boolean visited[]=new boolean[graph.V];
        st.push(start);
            while(!st.isEmpty()){
                int x=st.pop();
                if(!visited[x]){
                visited[x]=true;
                result.add(x);
                }
                for(int neighbour:graph.adjList[x]){
                    if(!visited[neighbour]){
                        st.push(neighbour);
                    }
                }
                
            }
        }
        
    }



3>
/*
Given number of vertices V and edges E, a graph is created and represented in 
the form of adjacency list. Given the graph, perform a BFS traversal of the graph.
Note: you just need to implement the bfs() method.

case=1
input=5 7
0 1
0 4
1 2
1 3
1 4
2 3
3 4
0
output=[0, 1, 4, 2, 3]
Explanation: First line: number of vertices followed by number of edges, 
followed by edges, followed by starting node.

case=2
input=6 10
1 0
0 2
1 0
1 3
2 0
2 3
3 4
3 5
4 3
5 3
0
output=[0, 1, 2, 3, 4, 5]

class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/

Solution:

import java.util.*;
class Solution
{
    public void bfs(Graph graph, int start, List<Integer> result)
    {
        // Implement your code here
        Queue<Integer> q=new LinkedList<>();
         boolean visited[]=new boolean[graph.V];
        q.offer(start);
        while(!q.isEmpty()){
            int node=q.poll();
            if(!visited[node]){
                visited[node]=true;
                result.add(node);
            
            for(int neigh:graph.adjList[node]){
                if(!visited[neigh]){
                    // visited[neigh]=true;
                    q.offer(neigh);
                }
            }
            }
            
        }
    }
}


Q 4>
No of conncected components using the dfs
/*
You have a graph of n nodes. You are given an integer n and an array edge 
where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in 
the graph.

Return the number of connected components in the graph using DFS.

Note: The boilerplate code to create graph represented as adjacency list from 
given vertices and edges is provided, you just need to implement the 
countConnectedComponents() method.

Sample testcase
 
case=1
input=5 3
0 1
1 2
3 4
output=2

Explanation:
Input: first line contains ‘n’ number of nodes and ‘m’ number of edges, 
followed by value for m edges.
Output: 2. First component having nodes 0, 1, 2 and second component having 
nodes 3, 4

 
case=2
input=5 4
0 1
1 2
2 3
3 4
output=1

class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/

import java.util.Stack;
import java.util.*;
class Solution
{
    int countConnectedComponents(Graph graph)
    {
        // Implement your code here
        boolean visited[] = new boolean[graph.V];
        
        int count=0;
        for(int i=0;i<graph.V;i++)
        {
            if(!visited[i])
            {
                dfs(graph,i,visited);
                count++;
            }
        }
        return count;
    }
    
    void  dfs(Graph graph,int i,boolean[] visited)
    {
        Deque<Integer> st = new ArrayDeque<>();
        st.push(i);
        while(!st.isEmpty())
        {
            int v = st.pop();
            if(!visited[v])
            {
                visited[v]= true;

                for(int neighbour: graph.adjList[v])
                {
                    if(!visited[neighbour])
                    {
                        st.push(neighbour);
                    }
                }
            }
        }
    }
}




Q 5>
No of connected componenets using the BFS


/*
You have a graph of n nodes. You are given an integer n and an array edge 
where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in 
the graph.

Return the number of connected components in the graph using BFS.

Note: The boilerplate code to create graph represented as adjacency list from 
given vertices and edges is provided, you just need to implement the 
countConnectedComponents() method.

Sample testcase
 
case=1
input=5 3
0 1
1 2
3 4
output=2

Explanation:
Input: first line contains ‘n’ number of nodes and ‘m’ number of edges, 
followed by value for m edges.
Output: 2. First component having nodes 0, 1, 2 and second component having 
nodes 3, 4


case=2
input=5 4
0 1
1 2
2 3
3 4
output=1

class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/

import java.util.*;
class Solution
{
    static void bfs(Graph graph,int start,boolean visited[]){
        Queue<Integer> q=new LinkedList<>();
        q.offer(start);
        while(!q.isEmpty()){
            int x=q.poll();
            if(!visited[x]){
                visited[x]=true;
                for(int neigh:graph.adjList[x]){
                    if(!visited[neigh]){
                        q.offer(neigh);
                    }
                }
            }
        }
    }

    int countConnectedComponents(Graph graph)
    {
        // Implement your code here
        boolean visited[]=new boolean[graph.V];
        int count=0;
        for(int i=0;i<graph.V;i++){
            if(!visited[i]){
            
            bfs(graph,i,visited);
            count++;
            }
        }
return count;
    }
}
    

Q 6>  ##NO of Islands
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

Solution:

class Solution {
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0){
            return 0;
        }
        int noofislands=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1'){
                    noofislands++;
                    dfs(grid,i,j);
                }
            }
        }
        return noofislands;
        
    }
    private void dfs(char [][] grid,int i,int j){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length ||grid[i][j]!='1'){
            return;
        }

        //mark as visited so i am making it '0';
        grid[i][j]='0';
        //travese all directions
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
    }
}


