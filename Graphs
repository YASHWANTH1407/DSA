1<Graph Creation 

Given number of vertices V and edges E, create a Graph class and implement the 
below methods
-	addEdge(), this method creates an edge between source and destination nodes.
-	displayGraph(), this method displays the graph as adjacency list representation.

case=1
input= 5 7
0 1
0 4
1 2
1 3
1 4
2 3
3 4
output=
Vertex 0: -> 1 -> 4
Vertex 1: -> 0 -> 2 -> 3 -> 4
Vertex 2: -> 1 -> 3
Vertex 3: -> 1 -> 2 -> 4
Vertex 4: -> 0 -> 1 -> 3

Explanation: First line: number of vertices followed by number of edges, 
followed by edges.



#SOlution:

import java.util.*;

class Graph {
    int vertices;
    List<Integer> adjList[];
    Graph(int v){
        vertices = v;
        adjList = new LinkedList[v];
        for(int i=0; i<v; i++){
            adjList[i] = new LinkedList<>();
        }
    }
    void addEdge(int src, int desc) {
        adjList[src].add(desc);
        adjList[desc].add(src);
    }
    void displayGraph(){
        for(int i=0; i<vertices; i++){
            System.out.print("Vertex " + i + ":");
            for(int neighbour : adjList[i]){
                System.out.print("-> " + neighbour);
            }
            System.out.println();
        }
    }
}

class test {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int vertices=sc.nextInt();
        Graph graph = new Graph(vertices);
        int nEdges=sc.nextInt();
        for(int i=0; i<nEdges; i++){
            int src = sc.nextInt();
            int desc = sc.nextInt();
            graph.addEdge(src, desc);
        }
        graph.displayGraph();
    }
}


2>Graph Travesals techniques.

/*
Given number of vertices V and edges E, a graph is created and represented 
in the form of adjacency list. Given the graph, perform a BFS traversal of the 
graph.
Note: you just need to implement the dfs() method.

case=1
input=5 7
0 1
0 4
1 2
1 3
1 4
2 3
3 4
0
output=[0, 4, 3, 2, 1]
Explanation: First line is the number of vertices followed by number of edges, 
followed by values for edges, followed by node to start the dfs.
class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/


Solution:
import java.util.*;
class Solution
{
    void dfs(Graph graph, int start, List<Integer> result)
    {
        // Implement your code here
        Deque<Integer> st=new ArrayDeque<>();
        boolean visited[]=new boolean[graph.V];
        st.push(start);
            while(!st.isEmpty()){
                int x=st.pop();
                if(!visited[x]){
                visited[x]=true;
                result.add(x);
                }
                for(int neighbour:graph.adjList[x]){
                    if(!visited[neighbour]){
                        st.push(neighbour);
                    }
                }
                
            }
        }
        
    }



3>
/*
Given number of vertices V and edges E, a graph is created and represented in 
the form of adjacency list. Given the graph, perform a BFS traversal of the graph.
Note: you just need to implement the bfs() method.

case=1
input=5 7
0 1
0 4
1 2
1 3
1 4
2 3
3 4
0
output=[0, 1, 4, 2, 3]
Explanation: First line: number of vertices followed by number of edges, 
followed by edges, followed by starting node.

case=2
input=6 10
1 0
0 2
1 0
1 3
2 0
2 3
3 4
3 5
4 3
5 3
0
output=[0, 1, 2, 3, 4, 5]

class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/

Solution:

import java.util.*;
class Solution
{
    public void bfs(Graph graph, int start, List<Integer> result)
    {
        // Implement your code here
        Queue<Integer> q=new LinkedList<>();
         boolean visited[]=new boolean[graph.V];
        q.offer(start);
        while(!q.isEmpty()){
            int node=q.poll();
            if(!visited[node]){
                visited[node]=true;
                result.add(node);
            
            for(int neigh:graph.adjList[node]){
                if(!visited[neigh]){
                    // visited[neigh]=true;
                    q.offer(neigh);
                }
            }
            }
            
        }
    }
}


Q 4>
No of conncected components using the dfs
/*
You have a graph of n nodes. You are given an integer n and an array edge 
where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in 
the graph.

Return the number of connected components in the graph using DFS.

Note: The boilerplate code to create graph represented as adjacency list from 
given vertices and edges is provided, you just need to implement the 
countConnectedComponents() method.

Sample testcase
 
case=1
input=5 3
0 1
1 2
3 4
output=2

Explanation:
Input: first line contains ‘n’ number of nodes and ‘m’ number of edges, 
followed by value for m edges.
Output: 2. First component having nodes 0, 1, 2 and second component having 
nodes 3, 4

 
case=2
input=5 4
0 1
1 2
2 3
3 4
output=1

class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/

import java.util.Stack;
import java.util.*;
class Solution
{
    int countConnectedComponents(Graph graph)
    {
        // Implement your code here
        boolean visited[] = new boolean[graph.V];
        
        int count=0;
        for(int i=0;i<graph.V;i++)
        {
            if(!visited[i])
            {
                dfs(graph,i,visited);
                count++;
            }
        }
        return count;
    }
    
    void  dfs(Graph graph,int i,boolean[] visited)
    {
        Deque<Integer> st = new ArrayDeque<>();
        st.push(i);
        while(!st.isEmpty())
        {
            int v = st.pop();
            if(!visited[v])
            {
                visited[v]= true;

                for(int neighbour: graph.adjList[v])
                {
                    if(!visited[neighbour])
                    {
                        st.push(neighbour);
                    }
                }
            }
        }
    }
}




Q 5>
No of connected componenets using the BFS


/*
You have a graph of n nodes. You are given an integer n and an array edge 
where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in 
the graph.

Return the number of connected components in the graph using BFS.

Note: The boilerplate code to create graph represented as adjacency list from 
given vertices and edges is provided, you just need to implement the 
countConnectedComponents() method.

Sample testcase
 
case=1
input=5 3
0 1
1 2
3 4
output=2

Explanation:
Input: first line contains ‘n’ number of nodes and ‘m’ number of edges, 
followed by value for m edges.
Output: 2. First component having nodes 0, 1, 2 and second component having 
nodes 3, 4


case=2
input=5 4
0 1
1 2
2 3
3 4
output=1

class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/

import java.util.*;
class Solution
{
    static void bfs(Graph graph,int start,boolean visited[]){
        Queue<Integer> q=new LinkedList<>();
        q.offer(start);
        while(!q.isEmpty()){
            int x=q.poll();
            if(!visited[x]){
                visited[x]=true;
                for(int neigh:graph.adjList[x]){
                    if(!visited[neigh]){
                        q.offer(neigh);
                    }
                }
            }
        }
    }

    int countConnectedComponents(Graph graph)
    {
        // Implement your code here
        boolean visited[]=new boolean[graph.V];
        int count=0;
        for(int i=0;i<graph.V;i++){
            if(!visited[i]){
            
            bfs(graph,i,visited);
            count++;
            }
        }
return count;
    }
}
    

Q 6>  ##NO of Islands
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

Solution:

class Solution {
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0){
            return 0;
        }
        int noofislands=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1'){
                    noofislands++;
                    dfs(grid,i,j);
                }
            }
        }
        return noofislands;
        
    }
    private void dfs(char [][] grid,int i,int j){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length ||grid[i][j]!='1'){
            return;
        }

        //mark as visited so i am making it '0';
        grid[i][j]='0';
        //travese all directions
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
    }
}


Solution 2:
import java.util.*;
public class test{
    public static int maxAreaOfIsland(int[][] grid) {
        int maxarea = 0;
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[0].length; col++) {
               if (grid[row][col] == 1){
                    maxarea= Math.max(maxarea, dfs(grid, row, col));
                     }
            }
      }
        return maxarea;
    }
    public static int dfs(int[][] grid, int row, int col) {
        if (row < 0||row >= grid.length ||col < 0 ||col >= grid[0].length ||grid[row][col]== 0) {
           return 0;
           }
        grid[row][col] = 0;
        int area = 1; 
        area += dfs(grid, row + 1, col); 
        area += dfs(grid, row - 1, col); 
        area += dfs(grid, row, col + 1); 
        area += dfs(grid, row, col - 1); 
        return area;
        }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int r= sc.nextInt();
        int c = sc.nextInt();
        int mat[][] = new int[r][c];
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                mat[i][j]= sc.nextInt();
                    }
                }
        System.out.print(maxAreaOfIsland(mat));
        }
    }   


Q 8>
/*
There is a bi-directional graph with n vertices, where each vertex is labeled 
from 0 to n - 1 (inclusive). The edges in the graph are represented as a 
2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional 
edge between vertex ui and vertex vi. Every vertex pair is connected by at most 
one edge, and no vertex has an edge to itself.

You want to determine if there is a valid path that exists from vertex source 
to vertex destination.

Given edges and the integers n, source, and destination, return true if there 
is a valid path from source to destination, or false otherwise.

Note: Given number of vertices V and edges E, a graph is created and 
represented in the form of adjacency list. Given the graph, perform a 
BFS traversal of the graph.
Note: you just need to implement the dfs() method.

case=1
input=3 3
0 1
1 2
2 0
0 2
output=true

Explanation:
Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true, there are two paths from vertex 0 to vertex 2
- 0 → 1 → 2
- 0 → 2

case=2
input=6 5
0 1
0 2
3 5
5 4
4 3
0 5
output=false

Explanation:
Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, 
destination = 5
Output: false, there is no path from vertex 0 to vertex 5.

class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/

import java.util.*;
class Solution
{
    public  boolean bfs(Graph graph,int source,int dest){
        Queue<Integer> q=new LinkedList<>();
        boolean visited[]=new boolean[graph.V];
        q.offer(source);
        while(!q.isEmpty()){
            int node=q.poll();
            if(!visited[node]){
                visited[node]=true;
                for(int neigh:graph.adjList[node]){
                    if(!visited[neigh]){
                        // visited[neigh]=true;
                        q.offer(neigh);
                    }
                }
            }
        }
        if(visited[source]==true && visited[dest]==true){
            return true;
            
        }
        return false;
    }
    boolean isValidPathExist(Graph graph, int source, int destination)
    {
        // Implement your code her
        return bfs(graph,source,destination);
    }
}


import java.util.*;
// class Solution {
//     public boolean validPath(int n, int[][] edges, int source, int destination) {
//        List<List<Integer>> graph=new ArrayList<>();
//        for(int i=0;i<n;i++){
//         graph.add(new ArrayList<>());
//        }

//        for(int[] edge:edges){
//         int u=edge[0];
//         int v=edge[1];
//         graph.get(u).add(v);
//         graph.get(v).add(u);
//        }

//        boolean[] visited=new boolean[n];

//        return dfs(graph,visited,source,destination);
        
//     }
//     private boolean dfs(List<List<Integer>> graph,boolean[] visited,int current,int destination){
//         if(current==destination){
//             return true;
//         }

//         visited[current]=true;

//         for(int neighbour:graph.get(current)){
//             if(!visited[neighbour]){
//                 if(dfs(graph,visited,neighbour,destination)){
//                     return true;
//                 }
//             }
//         }
//         return false;
//     }
// }






Q 10>
// import java.util.*;
// public class test{
//      public static int find(int trust[][],int number,int relations){
//          HashMap<Integer,Integer> hm=new HashMap<>();
//          for(int i=0;i<relations;i++){
//              for(int j=0;j<2;j++){
//                  int x=trust[i][j];
//                  hm.put(x,hm.getOrDefault(x,0)+1);
//              }
//          }
//          for(Map.Entry<Integer, Integer>entry:hm.entrySet()){
//              if(entry.getValue()==relations){
//                  return entry.getKey()+1;
//              }
//          }
//          return -1;
//      }
    
//     public static void main(String[] args){
//         Scanner sc=new Scanner(System.in);
//         int number=sc.nextInt();
//         int relations=sc.nextInt();
//         int [][] trust=new int[number][2];
//         for(int i=0;i<relations;i++){
//             for(int j=0;j<2;j++){
//                 trust[i][j]=sc.nextInt();
//             }
//         }
        
//         System.out.println(find(trust,number,relations));
//     }
// }


import java.util.*;

class test


{


    static int findJudge(int n,int [][] trust)
    

{


        int[] trustCounts = new int[n+1];
        
        for(int [] relation: trust)
        

{


            trustCounts[relation[0]]--;
            trustCounts[relation[1]]++;
        

}
        
        for(int i=1;i<=n;i++)
        

{


            if(trustCounts[i]==n-1)
            

{


                return i;
            

}
        

}
        return -1;
    

}
    
    public static void main(String args[])
    

{


        Scanner sc = new Scanner(System.in);
        
        int peo= sc.nextInt();
        int rel= sc.nextInt();
        
        int trust[][] = new int[rel][2];
        for(int i=0;i<rel;i++)
        

{


            trust[i][0]= sc.nextInt();
            trust[i][1]=sc.nextInt();
        

}
        
        System.out.println(findJudge(peo,trust));
    

}

}


Q 11>
There is a ball in a maze with empty spaces (represented as 0) and 
walls (represented as 1). The ball can go through the empty spaces by 
rolling up, down, left or right, but it won't stop rolling until hitting a wall. 
When the ball stops, it could choose the next direction.

Given the m x n maze, the ball's start position and the destination, where 
start = [startrow, startcol] and destination = [destinationrow, destinationcol],
return true if the ball can stop at the destination, otherwise return false.

You may assume that the borders of the maze are all walls (see examples).

Sample test case
case=1
input=5 5
0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0
0 4
4 4
output=true

Explanation: 
Input: Line 1, number of rows and columns, followed by values for each cell, 
followed by start cell, finally destination cell.
Output: true, One possible way is : 
left -> down -> left -> down -> right -> down -> right.

case=2
input=5 5
0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0
0 4
3 2
output=false
Explanation: There is no way for the ball to stop at the destination. 
Notice that you can pass through the destination but you cannot stop there.

case=3
input=5 5
0 0 0 0 0
1 1 0 0 1
0 0 0 0 0
0 1 0 0 1
0 1 0 0 0
4 3
0 1
output=false


10>
There is a ball in a maze with empty spaces (represented as 0) and 
walls (represented as 1). The ball can go through the empty spaces by 
rolling up, down, left or right, but it won't stop rolling until hitting a wall. 
When the ball stops, it could choose the next direction.

Given the m x n maze, the ball's start position and the destination, 
where start = [startrow, startcol] and 
destination = [destinationrow, destinationcol], 
return the shortest distance for the ball to stop at the destination. 
If the ball cannot stop at destination, return -1.

The distance is the number of empty spaces traveled by the ball from the 
start position (excluded) to the destination (included).

You may assume that the borders of the maze are all walls (see examples).

Sample test case
case=1
input=5 5
0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0
0 4
4 4
output=12

Explanation: 
Input: Line 1, number of rows and columns, followed by values for each cell, 
followed by start cell, finally destination cell.
Output: 12, One possible way is : left -> down -> left -> down -> right -> down -> right.
The length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.

case=2
input=5 5
0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0
0 4
3 2
output=-1
Explanation: There is no way for the ball to stop at the destination. 
Notice that you can pass through the destination but you cannot stop there.

case=3
input=5 5
0 0 0 0 0
1 1 0 0 1
0 0 0 0 0
0 1 0 0 1
0 1 0 0 0
4 3
0 1
output=-1


Solution:

// import java.util.*;
// public class test{
//     public static int shortestDistance(int [][] maze,int src[],int dest[]){
//         int rows=maze.length;
//         int cols=maze[0].length;
//         //Distance matrix initialized to "infinity"(unreachable initially)
//         int distance[][]=new int[rows][cols];
//         for(int [] row:distance){
//             Arrays.fill(row,Integer.MAX_VALUE);
//         }
//         //distsnce to the starting cell is 0
//         distance[src[0]][src[1]]=0;
//         //start DFS travesal to compute shortest distances
//         dfs(maze,src,distance);
//         //If destination is still unreachable,return -1
//         if(distance[dest[0]][dest[1]]==Integer.MAX_VALUE){
//             return -1;
//         }
//         else{  //otherwise return to the shortest distace to the desinaiton
//             return distance[dest[0]][dest[1]];
//         } 
        
//     }
//     public static  void dfs(int maze[][],int src[],int dist[][]){
//         int rows=maze.length;
//         int cols=maze[0].length;
        
//         int [][] dirs={{1,0},{-1,0},{0,1},{0,-1}};
//         int count=0;
//         for(int i=0;i<4;i++){
//             int r=src[0]+dirs[i][0];
//             int c=src[1]+dirs[i][1];
            
//             //keep moving in current direction until hitting a wall or edge
//             while(r>=0 && r<rows && c>=0 && c<cols && maze[r][c]==0){
//                 r=r+dirs[i][0];
//                 c=c+dirs[i][1];
//                 count++;
//             }
//             //rollback one step as last move hti the boundary/wall
//             int [] newCur=new int[]{r-dirs[i][0],c-dirs[i][1]};
            
//             //If the new path is shorter update and recurse
//             if(dist[src[0]][src[1]]+count <dist[newCur[0]][newCur[1]]){
//                 dist[newCur[0]][newCur[1]]=dist[src[0]][src[1]]+count;
//                 dfs(maze,newCur,dist); //recursively explore further from the new cell
//             }
//         }
        
        
//     }
    
//     public static void main(String[] args){
//         Scanner sc=new Scanner(System.in);
//         int rows=sc.nextInt();
//         int cols=sc.nextInt();
//         int arr[][]=new int[rows][cols];
//         for(int i=0;i<rows;i++){
//             for(int j=0;j<cols;j++){
//                 arr[i][j]=sc.nextInt();
//             }
//         }
//         int src[]=new int[]{sc.nextInt(),sc.nextInt()};
//         int dest[]=new int[]{sc.nextInt(),sc.nextInt()};
        
//         int result=shortestDistance(arr,src,dest);
//         System.out.println(result);
//     }
// }



import java.util.*;

public class test{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int m= sc.nextInt();
        int n= sc.nextInt();
        
        int[][] maze= new int[m][n];
        
        for(int i=0;i<=m-1;i++){
            for(int j=0;j<=n-1;j++){
                maze[i][j]= sc.nextInt();
            }
        }
        int sr=sc.nextInt();
        int scc= sc.nextInt();
        int dr= sc.nextInt();
        int dc= sc.nextInt();
        
        int[] curCell={sr, scc};
        int[] dest= {dr, dc};
        
        
        
        System.out.println(minDis(maze, curCell, dest));
    }
    
    static int minDis(int[][] grid, int[] curCell, int[] dest){
        
        int row=grid.length;
        int col= grid[0].length;
        
        int[][] distance= new int[row][col];
        
        for(int[] roww: distance){
            Arrays.fill(roww, Integer.MAX_VALUE);
        }
        distance[curCell[0]][curCell[1]]=0;
        
        dfs(grid, curCell, distance);
        
        if(distance[dest[0]][dest[1]]== Integer.MAX_VALUE){
            return -1;
        }
        
        return distance[dest[0]][dest[1]];
    }
    
    static void dfs(int[][] grid, int[] curCell, int[][] distance){
        int rowlen= grid.length;
        int collen= grid[0].length;
        
        int[][] direction={{1,0}, {-1,0}, {0,1}, {0, -1}};
        for(int i=0;i<4;i++){
            int r= curCell[0]+direction[i][0];
            int c= curCell[1]+direction[i][1];
            
            int count=0;
            
            while(r>=0 && r<rowlen && c>=0 && c<collen && grid[r][c]==0){
                r= r+direction[i][0];
                c= c+direction[i][1];
                count++;
            }
            
            int[] newCur= new int[] {r-direction[i][0], c- direction[i][1]};
            
            if(distance[curCell[0]][curCell[1]]+count< distance[newCur[0]][newCur[1]]){
                distance[newCur[0]][newCur[1]]= distance[curCell[0]][curCell[1]]+count;
                dfs(grid, newCur, distance);
            }
        }
    }
}
