1<Graph Creation 

Given number of vertices V and edges E, create a Graph class and implement the 
below methods
-	addEdge(), this method creates an edge between source and destination nodes.
-	displayGraph(), this method displays the graph as adjacency list representation.

case=1
input= 5 7
0 1
0 4
1 2
1 3
1 4
2 3
3 4
output=
Vertex 0: -> 1 -> 4
Vertex 1: -> 0 -> 2 -> 3 -> 4
Vertex 2: -> 1 -> 3
Vertex 3: -> 1 -> 2 -> 4
Vertex 4: -> 0 -> 1 -> 3

Explanation: First line: number of vertices followed by number of edges, 
followed by edges.



#SOlution:

import java.util.*;

class Graph {
    int vertices;
    List<Integer> adjList[];
    Graph(int v){
        vertices = v;
        adjList = new LinkedList[v];
        for(int i=0; i<v; i++){
            adjList[i] = new LinkedList<>();
        }
    }
    void addEdge(int src, int desc) {
        adjList[src].add(desc);
        adjList[desc].add(src);
    }
    void displayGraph(){
        for(int i=0; i<vertices; i++){
            System.out.print("Vertex " + i + ":");
            for(int neighbour : adjList[i]){
                System.out.print("-> " + neighbour);
            }
            System.out.println();
        }
    }
}

class test {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int vertices=sc.nextInt();
        Graph graph = new Graph(vertices);
        int nEdges=sc.nextInt();
        for(int i=0; i<nEdges; i++){
            int src = sc.nextInt();
            int desc = sc.nextInt();
            graph.addEdge(src, desc);
        }
        graph.displayGraph();
    }
}


2>Graph Travesals techniques.

/*
Given number of vertices V and edges E, a graph is created and represented 
in the form of adjacency list. Given the graph, perform a BFS traversal of the 
graph.
Note: you just need to implement the dfs() method.

case=1
input=5 7
0 1
0 4
1 2
1 3
1 4
2 3
3 4
0
output=[0, 4, 3, 2, 1]
Explanation: First line is the number of vertices followed by number of edges, 
followed by values for edges, followed by node to start the dfs.
class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/


Solution:
import java.util.*;
class Solution
{
    void dfs(Graph graph, int start, List<Integer> result)
    {
        // Implement your code here
        Deque<Integer> st=new ArrayDeque<>();
        boolean visited[]=new boolean[graph.V];
        st.push(start);
            while(!st.isEmpty()){
                int x=st.pop();
                if(!visited[x]){
                visited[x]=true;
                result.add(x);
                }
                for(int neighbour:graph.adjList[x]){
                    if(!visited[neighbour]){
                        st.push(neighbour);
                    }
                }
                
            }
        }
        
    }



3>
/*
Given number of vertices V and edges E, a graph is created and represented in 
the form of adjacency list. Given the graph, perform a BFS traversal of the graph.
Note: you just need to implement the bfs() method.

case=1
input=5 7
0 1
0 4
1 2
1 3
1 4
2 3
3 4
0
output=[0, 1, 4, 2, 3]
Explanation: First line: number of vertices followed by number of edges, 
followed by edges, followed by starting node.

case=2
input=6 10
1 0
0 2
1 0
1 3
2 0
2 3
3 4
3 5
4 3
5 3
0
output=[0, 1, 2, 3, 4, 5]

class Graph
{
    int V;
    LinkedList<Integer>[] adjList;
}
*/

Solution:

import java.util.*;
class Solution
{
    public void bfs(Graph graph, int start, List<Integer> result)
    {
        // Implement your code here
        Queue<Integer> q=new LinkedList<>();
         boolean visited[]=new boolean[graph.V];
        q.offer(start);
        while(!q.isEmpty()){
            int node=q.poll();
            if(!visited[node]){
                visited[node]=true;
                result.add(node);
            
            for(int neigh:graph.adjList[node]){
                if(!visited[neigh]){
                    // visited[neigh]=true;
                    q.offer(neigh);
                }
            }
            }
            
        }
    }
}



    
    

