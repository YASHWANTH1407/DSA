The Fibonacci numbers, commonly denoted F(n) form a sequence, called the 
Fibonacci sequence, such that each number is the sum of the two preceding 
ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

case=1
input=2
output=1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

case=2
input=3
output=2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.

case=3
input=60
output=1548008755920


import java.util.*;
public class test{
    public static   int  fib(int n, int dp[]){
        if(n==0){
            return 0;
        }
        else if(n==1){
            return 1;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        
        dp[n]=fib(n-1,dp)+fib(n-2,dp);
        return dp[n];
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
         int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        System.out.println(fib(n,dp));
    }
}

You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can 
you climb to the top?

Sample test cases

case=1
input=2
output=2

Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

case=2
input=3
output=3

Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

case=6
input=60
output=2504730781961


import java.util.*;
public class test{
    public static long ways(int n,long dp[]){
        if(n==0){
            return 1;
        }
        if(n==1 || n==2){
            return n;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        dp[n]=ways(n-1,dp)+ways(n-2,dp);
        
        return dp[n];
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        long dp[]=new long[n+1];
        Arrays.fill(dp,-1);
        System.out.println(ways(n,dp));
    }
}


You are given an integer array coin representing coins of different 
denominations and an integer amount representing a total amount of money.
Return the few`est number of coins that you need to make up that amount. 
If that amount of money cannot be made up by any combination of the 
coins, return -1.
You may assume that you have an infinite number of each kind of coin.

Sample test case

case=1
input=3
1 2 5
11
output=3

case=2
input=1
2
3
output=-1

case=3
input=4
9 6 5 1
11
output=2


import java.util.*;
public class test{
    public static int ways(int arr[],int dp[],int target){
      
      if(target==0){
          return 0;
      }
      if(target<0){
          return -1;
      }
      if(dp[target]!=-1){
          return dp[target];
      }
      

int min=Integer.MAX_VALUE;
      
     for(int i=0;i<arr.length;i++){
         int result=ways(arr,dp,target-arr[i]);
         
        if(result!=-1){
            min=Math.min(min,result+1);
        
    }
    

}

        dp[target]=(min==Integer.MAX_VALUE)?-1:min;
        

    return dp[target];


}
    
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int target=sc.nextInt();
        int dp[]=new int[target+1];
        Arrays.fill(dp,-1);
        System.out.println(ways(arr,dp,target));
    }
}



You are given an integer array coins representing coins of different 
denominations and an integer amount representing a total amount of money.
Return the number of combinations that make up that amount. If that amount 
of money cannot be made up by any combination of the coins, return 0.
You may assume that you have an infinite number of each kind of coin.
The answer is guaranteed to fit into a signed 32-bit integer.

case=1
input=3
1 2 5
5
output=4

Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

case=2
input=1
2
3
output=0

Explanation: the amount of 3 cannot be made up just with coins of 2.

case=3
input=1
10
10
output=1

case=5
input=20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
200
output=829363940


import java.util.*;
public class test{
    public static int combinations(int arr[],int target,int dp[][],int index){
        if(target==0){
            return 1;
        }
        if(target<0 || index==arr.length){
            return 0;
        }
        if(dp[index][target]!=-1){
            return dp[index][target];
        }
        // int no_of_ways=0;
        //     for(int i=0;i<arr.length;i++){
        //          no_of_ways+=combinations(arr,target-arr[i],dp);
        //     }
        // dp[target]=no_of_ways;
    //  dp[index]=dp[index]+ combinations(arr,target-arr[index],dp,index+1);
    
    
       int consider=combinations(arr,target-arr[index],dp,index);
       
       int leave=combinations(arr,target,dp,index+1);
       

      int no_of_ways=consider+leave;
      dp[index][target]=no_of_ways;
      
     return dp[index][target];
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int target=sc.nextInt();
        int dp[][]=new int[n][target+1];
        for(int row[]:dp)
        Arrays.fill(row,-1);
        System.out.println(combinations(arr,target,dp,0));
    }
}




You are given an m x n integer array grid. There is a robot initially located 
at the top-left corner (i.e., grid[0][0]). The robot tries to move to the 
bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either 
down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that 
the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach 
the bottom-right corner.

The testcases are generated so that the answer will be less than or equal 
to 2 * 10^9.

Example 1:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1

case=1
input=3 3
0 0 0
0 1 0
0 0 0
output=2

case=2
input=2 2
0 1
0 0
output=1


import java.util.*;
public class test{
    public static int ways(int arr[][],int row,int col,int dp[][]){
        if(row>=arr.length || col>=arr[0].length || arr[row][col]==1){
            return 0;
        }
        if(row==arr.length-1 && col==arr[0].length-1){
            return 1;
        }
        if(dp[row][col]!=-1){
            return dp[row][col];
        }
        
        // if(arr[row][col]==0){
            int right=ways(arr,row,col+1,dp);
            int down=ways(arr,row+1,col,dp);
            
            
        // }
        
        dp[row][col]=right+down;
        
        return dp[row][col];
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        int arr[][]=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                arr[i][j]=sc.nextInt();
            }
        }
        int dp[][]=new int[m][n];
        for(int rows[]:dp){
            Arrays.fill(rows,-1);
        }
        System.out.println(ways(arr,0,0,dp));
    }
}

You are given an integer array coin representing coins of different 
denominations and an integer amount representing a total amount of money.
Return the few`est number of coins that you need to make up that amount. 
If that amount of money cannot be made up by any combination of the 
coins, return -1.
You may assume that you have an infinite number of each kind of coin.

Sample test case

case=1
input=3
1 2 5
11
output=3

case=2
input=1
2
3
output=-1

case=3
input=4
9 6 5 1
11
output=2


import java.util.*;
public class test{
    public static int ways(int arr[],int dp[],int target){
      
      if(target==0){
          return 0;
      }
      if(target<0){
          return -1;
      }
      if(dp[target]!=-1){
          return dp[target];
      }
      

int min=Integer.MAX_VALUE;
      
     for(int i=0;i<arr.length;i++){
         int result=ways(arr,dp,target-arr[i]);
         
        if(result!=-1){
            min=Math.min(min,result+1);
        
    }
    

}

        dp[target]=(min==Integer.MAX_VALUE)?-1:min;
        

    return dp[target];


}
    
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int target=sc.nextInt();
        int dp[]=new int[target+1];
        Arrays.fill(dp,-1);
        System.out.println(ways(arr,dp,target));
    }
}



You are given an array prices where prices[i] is the price of a given stock on 
the ith day.
You want to maximize your profit by choosing a single day to buy one stock 
and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you 
cannot achieve any profit, return 0.

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), 
profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you 
must buy before you sell.

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

case=1
input=6
7 1 5 3 6 4
output=5

case=2
input=5
7 6 4 3 1
output=0

case=3
input=50
1 100 2 100 3 100 4 100 5 100 6 100 7 100 8 100 9 100 10 100 11 100 12 100 13 100 14 100 15 100 16 100 17 100 18 100 19 100 20 100 21 100 22 100 23 100 24 100 25 100
output=99




import java.util.*;
public class test{
    public static int maxProfit(int arr[],int dp[],int index){
         int profit=0;
        
        if(profit==0){
            return 0;
        }
        if(dp[profit]!=-1){
            return dp[profit];
        }
       
        for(int i=0;i<arr.length-1;i++){
            for(int j=i+1;j<arr.length;j++){
                profit=Math.max(profit,arr[j]-arr[i]);
            }
            dp[profit]=profit;
        }
        
        return dp[profit];
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        System.out.println(maxProfit(arr,dp,0));
    }
}

You are a professional robber planning to rob houses along a street. Each 
house has a certain amount of money stashed, the only constraint stopping 
you from robbing each of them is that adjacent houses have security systems 
connected and it will automatically contact the police if two adjacent houses 
were broken into on the same night.

Given an integer array nums representing the amount of money of each house, 
return the maximum amount of money you can rob tonight without alerting the 
police.

case=1
input=6
55 3 4 110 7 35
output=200
Explanation: Rob house 1 (money = 55), then rob house 4 (money = 110) and 
then rob house 6(money = 35)
Total amount you can rob = 55 + 110 + 35 = 200.

case=2
input=8
6 55 4 8 110 7 2 45
output=210
Explanation: Rob house 1 (money = 55), then rob house 5 (money = 110) and 
then rob house 8(money = 45)
Total amount you can rob = 55 + 110 + 45 = 210.













Given a string s and a dictionary of strings wordDict, return true if s can be 
segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the 
segmentation.

case=1
input=helloworld
hello world
output=true
Explanation: Return true because "helloworld" can be segmented as "hello world".

case=2
input=applepenapple
apple pen
output=true
Explanation: Return true because "applepenapple" can be segmented 
as "apple pen apple".
Note that you are allowed to reuse a dictionary word.

case=3
input=catsandog
cats dog sand and cat
output=false



import java.util.*;
public class test{
    public static boolean segmentation(String str,List<String> li,Map<String,Boolean> map,Set<String> set){
        if(str.isEmpty()){
            return true;
        }
        if(map.containsKey(str)){
            return map.get(str);
            
            
        }
        for(int i=1;i<=str.length();i++){
            String prefix=str.substring(0,i);
            String suffix=str.substring(i);
            if(set.contains(prefix) && segmentation(suffix,li,map,set)){
                map.put(str,true);
                return true;
            }
        }
        map.put(str,false);
        return false;
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        String str1=sc.nextLine();
        List<String> li=Arrays.asList(str1.split(" "));
        Map<String,Boolean> map=new HashMap<>();
        Set<String> set=new HashSet<>(li);
        System.out.println(segmentation(str,li,map,set));
    }
}


There is a robot on an m x n grid. The robot is initially located at the 
top-left corner (i.e., grid[0][0]). The robot tries to move to the 
bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths 
that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal 
to 2 * 109.

case=1
input=3 2
output=3
Explanation: From the top-left corner, there are a total of 3 ways to reach 
the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

case=2
input=3 7
output=28

case=4
input=30 20
output=1270772128


import java.util.*;
public class test{
    public static int uniquePaths(int m,int n,int dp[][]){
        if(m>=dp.length || n>=dp[0].length){
            return 0;
        }
        if(dp.length-1==m && dp[0].length-1==n){
            return 1;
        }
        if(dp[m][n]!=-1){
            return dp[m][n];
        }
        int right=uniquePaths(m,n+1,dp);
        int down=uniquePaths(m+1,n,dp);
        dp[m][n]=right+down;
        
        return dp[m][n];
        
    }
    public static void main(String[]  args){
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        int arr[][]=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                arr[i][j]=-1;
            }
        }
        System.out.println(uniquePaths(0,0,arr));
    }
}

Given a m x n grid filled with non-negative numbers, find a path from 
top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

case=1
input=3 3
1 3 1
1 5 1
4 2 1
output=7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum

case=2
input=3 2
1 2 3
4 5 6
output=12
import java.util.*;
public class test{
    public static int uniquePathSum(int row,int col,int arr[][],Integer dp[][]){
        if(row>=arr.length || col>=arr[0].length){
            return Integer.MAX_VALUE;
        }
        if(row==arr.length-1 && col==arr[0].length-1){
            return arr[row][col];
        }
        if(dp[row][col]!=null){
            return dp[row][col];
        }
        // int right=uniquePathSum(row,col+1,arr,dp,sum+arr[row][col]);
        // int down=uniquePathSum(row+1,col,arr,dp,sum+arr[row][col]);
        
        int right=uniquePathSum(row,col+1,arr,dp);
        int down=uniquePathSum(row+1,col,arr,dp);
        dp[row][col]=arr[row][col]+Math.min(right,down);
        
        return dp[row][col];
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        int arr[][]=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                arr[i][j]=sc.nextInt();
            }
        }
        Integer dp[][]=new Integer[m][n];
        System.out.println(uniquePathSum(0,0,arr,dp));
    }
}


Given an integer array nums, return the length of the longest strictly 
increasing subsequence.

case=1
input=8
10 9 2 5 3 7 101 18
output=4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore 
the length is 4.

case=2
input=6
0 1 0 3 2 3
output=4

case=3
input=7
7 7 7 7 7 7 7
output=1


import java.util.*;
public class test{
    public static int increasingSubsequence(int arr[],int start,int dp[]){
    if(dp[start]!=Integer.MIN_VALUE){
        return dp[start];
    }
    int max=1;
    for(int i=start+1;i<arr.length;i++){
        if(arr[start]<arr[i]){
            max=Math.max(max,1+increasingSubsequence(arr,i,dp));
        }
    }
      
      dp[start]=max;
      
      return max;
       
        
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        int dp[]=new int[n];
        Arrays.fill(dp,Integer.MIN_VALUE);
         int maxLIS = 0;
        for (int i = 0; i < n; i++) {
            maxLIS = Math.max(maxLIS, increasingSubsequence(arr, i, dp));
        }
        System.out.println(maxLIS);
    }
}


